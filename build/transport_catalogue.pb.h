// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "graph.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace tc_serialize {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportBase;
struct TransportBaseDefaultTypeInternal;
extern TransportBaseDefaultTypeInternal _TransportBase_default_instance_;
}  // namespace tc_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::tc_serialize::Bus* Arena::CreateMaybeMessage<::tc_serialize::Bus>(Arena*);
template<> ::tc_serialize::Distance* Arena::CreateMaybeMessage<::tc_serialize::Distance>(Arena*);
template<> ::tc_serialize::Stop* Arena::CreateMaybeMessage<::tc_serialize::Stop>(Arena*);
template<> ::tc_serialize::TransportBase* Arena::CreateMaybeMessage<::tc_serialize::TransportBase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tc_serialize {

// ===================================================================

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLatFieldNumber = 3,
    kLngFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double lat = 3;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 4;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double lat_;
    double lng_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 3,
    kHalfRouteFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kIsRoundFieldNumber = 4,
  };
  // repeated int32 route = 3;
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  private:
  int32_t _internal_route(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_route() const;
  void _internal_add_route(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_route();
  public:
  int32_t route(int index) const;
  void set_route(int index, int32_t value);
  void add_route(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_route();

  // repeated int32 half_route = 5;
  int half_route_size() const;
  private:
  int _internal_half_route_size() const;
  public:
  void clear_half_route();
  private:
  int32_t _internal_half_route(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_half_route() const;
  void _internal_add_half_route(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_half_route();
  public:
  int32_t half_route(int index) const;
  void set_half_route(int index, int32_t value);
  void add_half_route(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      half_route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_half_route();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool is_round = 4;
  void clear_is_round();
  bool is_round() const;
  void set_is_round(bool value);
  private:
  bool _internal_is_round() const;
  void _internal_set_is_round(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > route_;
    mutable std::atomic<int> _route_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > half_route_;
    mutable std::atomic<int> _half_route_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    bool is_round_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  ~Distance() override;
  explicit PROTOBUF_CONSTEXPR Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Distance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Distance& from) {
    Distance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstStopIdFieldNumber = 1,
    kSecondStopIdFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // int32 first_stop_id = 1;
  void clear_first_stop_id();
  int32_t first_stop_id() const;
  void set_first_stop_id(int32_t value);
  private:
  int32_t _internal_first_stop_id() const;
  void _internal_set_first_stop_id(int32_t value);
  public:

  // int32 second_stop_id = 2;
  void clear_second_stop_id();
  int32_t second_stop_id() const;
  void set_second_stop_id(int32_t value);
  private:
  int32_t _internal_second_stop_id() const;
  void _internal_set_second_stop_id(int32_t value);
  public:

  // int32 distance = 3;
  void clear_distance();
  int32_t distance() const;
  void set_distance(int32_t value);
  private:
  int32_t _internal_distance() const;
  void _internal_set_distance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t first_stop_id_;
    int32_t second_stop_id_;
    int32_t distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.TransportBase) */ {
 public:
  inline TransportBase() : TransportBase(nullptr) {}
  ~TransportBase() override;
  explicit PROTOBUF_CONSTEXPR TransportBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportBase(const TransportBase& from);
  TransportBase(TransportBase&& from) noexcept
    : TransportBase() {
    *this = ::std::move(from);
  }

  inline TransportBase& operator=(const TransportBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportBase& operator=(TransportBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportBase* internal_default_instance() {
    return reinterpret_cast<const TransportBase*>(
               &_TransportBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransportBase& a, TransportBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportBase& from) {
    TransportBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.TransportBase";
  }
  protected:
  explicit TransportBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kRendSetFieldNumber = 4,
    kGraphFieldNumber = 5,
    kRouterFieldNumber = 6,
    kTransportRouterFieldNumber = 7,
  };
  // repeated .tc_serialize.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::tc_serialize::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop >*
      mutable_stops();
  private:
  const ::tc_serialize::Stop& _internal_stops(int index) const;
  ::tc_serialize::Stop* _internal_add_stops();
  public:
  const ::tc_serialize::Stop& stops(int index) const;
  ::tc_serialize::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop >&
      stops() const;

  // repeated .tc_serialize.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::tc_serialize::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Bus >*
      mutable_buses();
  private:
  const ::tc_serialize::Bus& _internal_buses(int index) const;
  ::tc_serialize::Bus* _internal_add_buses();
  public:
  const ::tc_serialize::Bus& buses(int index) const;
  ::tc_serialize::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Bus >&
      buses() const;

  // repeated .tc_serialize.Distance distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::tc_serialize::Distance* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Distance >*
      mutable_distances();
  private:
  const ::tc_serialize::Distance& _internal_distances(int index) const;
  ::tc_serialize::Distance* _internal_add_distances();
  public:
  const ::tc_serialize::Distance& distances(int index) const;
  ::tc_serialize::Distance* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Distance >&
      distances() const;

  // .tc_serialize.RenderSettings rend_set = 4;
  bool has_rend_set() const;
  private:
  bool _internal_has_rend_set() const;
  public:
  void clear_rend_set();
  const ::tc_serialize::RenderSettings& rend_set() const;
  PROTOBUF_NODISCARD ::tc_serialize::RenderSettings* release_rend_set();
  ::tc_serialize::RenderSettings* mutable_rend_set();
  void set_allocated_rend_set(::tc_serialize::RenderSettings* rend_set);
  private:
  const ::tc_serialize::RenderSettings& _internal_rend_set() const;
  ::tc_serialize::RenderSettings* _internal_mutable_rend_set();
  public:
  void unsafe_arena_set_allocated_rend_set(
      ::tc_serialize::RenderSettings* rend_set);
  ::tc_serialize::RenderSettings* unsafe_arena_release_rend_set();

  // .tc_serialize.Graph graph = 5;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::tc_serialize::Graph& graph() const;
  PROTOBUF_NODISCARD ::tc_serialize::Graph* release_graph();
  ::tc_serialize::Graph* mutable_graph();
  void set_allocated_graph(::tc_serialize::Graph* graph);
  private:
  const ::tc_serialize::Graph& _internal_graph() const;
  ::tc_serialize::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::tc_serialize::Graph* graph);
  ::tc_serialize::Graph* unsafe_arena_release_graph();

  // .tc_serialize.Router router = 6;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::tc_serialize::Router& router() const;
  PROTOBUF_NODISCARD ::tc_serialize::Router* release_router();
  ::tc_serialize::Router* mutable_router();
  void set_allocated_router(::tc_serialize::Router* router);
  private:
  const ::tc_serialize::Router& _internal_router() const;
  ::tc_serialize::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::tc_serialize::Router* router);
  ::tc_serialize::Router* unsafe_arena_release_router();

  // .tc_serialize.TransportRouter transport_router = 7;
  bool has_transport_router() const;
  private:
  bool _internal_has_transport_router() const;
  public:
  void clear_transport_router();
  const ::tc_serialize::TransportRouter& transport_router() const;
  PROTOBUF_NODISCARD ::tc_serialize::TransportRouter* release_transport_router();
  ::tc_serialize::TransportRouter* mutable_transport_router();
  void set_allocated_transport_router(::tc_serialize::TransportRouter* transport_router);
  private:
  const ::tc_serialize::TransportRouter& _internal_transport_router() const;
  ::tc_serialize::TransportRouter* _internal_mutable_transport_router();
  public:
  void unsafe_arena_set_allocated_transport_router(
      ::tc_serialize::TransportRouter* transport_router);
  ::tc_serialize::TransportRouter* unsafe_arena_release_transport_router();

  // @@protoc_insertion_point(class_scope:tc_serialize.TransportBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Bus > buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Distance > distances_;
    ::tc_serialize::RenderSettings* rend_set_;
    ::tc_serialize::Graph* graph_;
    ::tc_serialize::Router* router_;
    ::tc_serialize::TransportRouter* transport_router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stop

// int32 id = 1;
inline void Stop::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Stop::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Stop::id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Stop::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Stop.id)
}

// string name = 2;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tc_serialize.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tc_serialize.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:tc_serialize.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.Stop.name)
}

// double lat = 3;
inline void Stop::clear_lat() {
  _impl_.lat_ = 0;
}
inline double Stop::_internal_lat() const {
  return _impl_.lat_;
}
inline double Stop::lat() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Stop.lat)
  return _internal_lat();
}
inline void Stop::_internal_set_lat(double value) {
  
  _impl_.lat_ = value;
}
inline void Stop::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Stop.lat)
}

// double lng = 4;
inline void Stop::clear_lng() {
  _impl_.lng_ = 0;
}
inline double Stop::_internal_lng() const {
  return _impl_.lng_;
}
inline double Stop::lng() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Stop.lng)
  return _internal_lng();
}
inline void Stop::_internal_set_lng(double value) {
  
  _impl_.lng_ = value;
}
inline void Stop::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Stop.lng)
}

// -------------------------------------------------------------------

// Bus

// int32 id = 1;
inline void Bus::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Bus::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Bus::id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Bus.id)
  return _internal_id();
}
inline void Bus::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Bus::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Bus.id)
}

// string name = 2;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tc_serialize.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tc_serialize.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:tc_serialize.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.Bus.name)
}

// repeated int32 route = 3;
inline int Bus::_internal_route_size() const {
  return _impl_.route_.size();
}
inline int Bus::route_size() const {
  return _internal_route_size();
}
inline void Bus::clear_route() {
  _impl_.route_.Clear();
}
inline int32_t Bus::_internal_route(int index) const {
  return _impl_.route_.Get(index);
}
inline int32_t Bus::route(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.Bus.route)
  return _internal_route(index);
}
inline void Bus::set_route(int index, int32_t value) {
  _impl_.route_.Set(index, value);
  // @@protoc_insertion_point(field_set:tc_serialize.Bus.route)
}
inline void Bus::_internal_add_route(int32_t value) {
  _impl_.route_.Add(value);
}
inline void Bus::add_route(int32_t value) {
  _internal_add_route(value);
  // @@protoc_insertion_point(field_add:tc_serialize.Bus.route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bus::_internal_route() const {
  return _impl_.route_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bus::route() const {
  // @@protoc_insertion_point(field_list:tc_serialize.Bus.route)
  return _internal_route();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bus::_internal_mutable_route() {
  return &_impl_.route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bus::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.Bus.route)
  return _internal_mutable_route();
}

// bool is_round = 4;
inline void Bus::clear_is_round() {
  _impl_.is_round_ = false;
}
inline bool Bus::_internal_is_round() const {
  return _impl_.is_round_;
}
inline bool Bus::is_round() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Bus.is_round)
  return _internal_is_round();
}
inline void Bus::_internal_set_is_round(bool value) {
  
  _impl_.is_round_ = value;
}
inline void Bus::set_is_round(bool value) {
  _internal_set_is_round(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Bus.is_round)
}

// repeated int32 half_route = 5;
inline int Bus::_internal_half_route_size() const {
  return _impl_.half_route_.size();
}
inline int Bus::half_route_size() const {
  return _internal_half_route_size();
}
inline void Bus::clear_half_route() {
  _impl_.half_route_.Clear();
}
inline int32_t Bus::_internal_half_route(int index) const {
  return _impl_.half_route_.Get(index);
}
inline int32_t Bus::half_route(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.Bus.half_route)
  return _internal_half_route(index);
}
inline void Bus::set_half_route(int index, int32_t value) {
  _impl_.half_route_.Set(index, value);
  // @@protoc_insertion_point(field_set:tc_serialize.Bus.half_route)
}
inline void Bus::_internal_add_half_route(int32_t value) {
  _impl_.half_route_.Add(value);
}
inline void Bus::add_half_route(int32_t value) {
  _internal_add_half_route(value);
  // @@protoc_insertion_point(field_add:tc_serialize.Bus.half_route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bus::_internal_half_route() const {
  return _impl_.half_route_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bus::half_route() const {
  // @@protoc_insertion_point(field_list:tc_serialize.Bus.half_route)
  return _internal_half_route();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bus::_internal_mutable_half_route() {
  return &_impl_.half_route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bus::mutable_half_route() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.Bus.half_route)
  return _internal_mutable_half_route();
}

// -------------------------------------------------------------------

// Distance

// int32 first_stop_id = 1;
inline void Distance::clear_first_stop_id() {
  _impl_.first_stop_id_ = 0;
}
inline int32_t Distance::_internal_first_stop_id() const {
  return _impl_.first_stop_id_;
}
inline int32_t Distance::first_stop_id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Distance.first_stop_id)
  return _internal_first_stop_id();
}
inline void Distance::_internal_set_first_stop_id(int32_t value) {
  
  _impl_.first_stop_id_ = value;
}
inline void Distance::set_first_stop_id(int32_t value) {
  _internal_set_first_stop_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Distance.first_stop_id)
}

// int32 second_stop_id = 2;
inline void Distance::clear_second_stop_id() {
  _impl_.second_stop_id_ = 0;
}
inline int32_t Distance::_internal_second_stop_id() const {
  return _impl_.second_stop_id_;
}
inline int32_t Distance::second_stop_id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Distance.second_stop_id)
  return _internal_second_stop_id();
}
inline void Distance::_internal_set_second_stop_id(int32_t value) {
  
  _impl_.second_stop_id_ = value;
}
inline void Distance::set_second_stop_id(int32_t value) {
  _internal_set_second_stop_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Distance.second_stop_id)
}

// int32 distance = 3;
inline void Distance::clear_distance() {
  _impl_.distance_ = 0;
}
inline int32_t Distance::_internal_distance() const {
  return _impl_.distance_;
}
inline int32_t Distance::distance() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Distance.distance)
  return _internal_distance();
}
inline void Distance::_internal_set_distance(int32_t value) {
  
  _impl_.distance_ = value;
}
inline void Distance::set_distance(int32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Distance.distance)
}

// -------------------------------------------------------------------

// TransportBase

// repeated .tc_serialize.Stop stops = 1;
inline int TransportBase::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int TransportBase::stops_size() const {
  return _internal_stops_size();
}
inline void TransportBase::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::tc_serialize::Stop* TransportBase::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.TransportBase.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop >*
TransportBase::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.TransportBase.stops)
  return &_impl_.stops_;
}
inline const ::tc_serialize::Stop& TransportBase::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::tc_serialize::Stop& TransportBase::stops(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.TransportBase.stops)
  return _internal_stops(index);
}
inline ::tc_serialize::Stop* TransportBase::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::tc_serialize::Stop* TransportBase::add_stops() {
  ::tc_serialize::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:tc_serialize.TransportBase.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop >&
TransportBase::stops() const {
  // @@protoc_insertion_point(field_list:tc_serialize.TransportBase.stops)
  return _impl_.stops_;
}

// repeated .tc_serialize.Bus buses = 2;
inline int TransportBase::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int TransportBase::buses_size() const {
  return _internal_buses_size();
}
inline void TransportBase::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::tc_serialize::Bus* TransportBase::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.TransportBase.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Bus >*
TransportBase::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.TransportBase.buses)
  return &_impl_.buses_;
}
inline const ::tc_serialize::Bus& TransportBase::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::tc_serialize::Bus& TransportBase::buses(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.TransportBase.buses)
  return _internal_buses(index);
}
inline ::tc_serialize::Bus* TransportBase::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::tc_serialize::Bus* TransportBase::add_buses() {
  ::tc_serialize::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:tc_serialize.TransportBase.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Bus >&
TransportBase::buses() const {
  // @@protoc_insertion_point(field_list:tc_serialize.TransportBase.buses)
  return _impl_.buses_;
}

// repeated .tc_serialize.Distance distances = 3;
inline int TransportBase::_internal_distances_size() const {
  return _impl_.distances_.size();
}
inline int TransportBase::distances_size() const {
  return _internal_distances_size();
}
inline void TransportBase::clear_distances() {
  _impl_.distances_.Clear();
}
inline ::tc_serialize::Distance* TransportBase::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.TransportBase.distances)
  return _impl_.distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Distance >*
TransportBase::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.TransportBase.distances)
  return &_impl_.distances_;
}
inline const ::tc_serialize::Distance& TransportBase::_internal_distances(int index) const {
  return _impl_.distances_.Get(index);
}
inline const ::tc_serialize::Distance& TransportBase::distances(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.TransportBase.distances)
  return _internal_distances(index);
}
inline ::tc_serialize::Distance* TransportBase::_internal_add_distances() {
  return _impl_.distances_.Add();
}
inline ::tc_serialize::Distance* TransportBase::add_distances() {
  ::tc_serialize::Distance* _add = _internal_add_distances();
  // @@protoc_insertion_point(field_add:tc_serialize.TransportBase.distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Distance >&
TransportBase::distances() const {
  // @@protoc_insertion_point(field_list:tc_serialize.TransportBase.distances)
  return _impl_.distances_;
}

// .tc_serialize.RenderSettings rend_set = 4;
inline bool TransportBase::_internal_has_rend_set() const {
  return this != internal_default_instance() && _impl_.rend_set_ != nullptr;
}
inline bool TransportBase::has_rend_set() const {
  return _internal_has_rend_set();
}
inline const ::tc_serialize::RenderSettings& TransportBase::_internal_rend_set() const {
  const ::tc_serialize::RenderSettings* p = _impl_.rend_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::RenderSettings&>(
      ::tc_serialize::_RenderSettings_default_instance_);
}
inline const ::tc_serialize::RenderSettings& TransportBase::rend_set() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TransportBase.rend_set)
  return _internal_rend_set();
}
inline void TransportBase::unsafe_arena_set_allocated_rend_set(
    ::tc_serialize::RenderSettings* rend_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rend_set_);
  }
  _impl_.rend_set_ = rend_set;
  if (rend_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.TransportBase.rend_set)
}
inline ::tc_serialize::RenderSettings* TransportBase::release_rend_set() {
  
  ::tc_serialize::RenderSettings* temp = _impl_.rend_set_;
  _impl_.rend_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::RenderSettings* TransportBase::unsafe_arena_release_rend_set() {
  // @@protoc_insertion_point(field_release:tc_serialize.TransportBase.rend_set)
  
  ::tc_serialize::RenderSettings* temp = _impl_.rend_set_;
  _impl_.rend_set_ = nullptr;
  return temp;
}
inline ::tc_serialize::RenderSettings* TransportBase::_internal_mutable_rend_set() {
  
  if (_impl_.rend_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::RenderSettings>(GetArenaForAllocation());
    _impl_.rend_set_ = p;
  }
  return _impl_.rend_set_;
}
inline ::tc_serialize::RenderSettings* TransportBase::mutable_rend_set() {
  ::tc_serialize::RenderSettings* _msg = _internal_mutable_rend_set();
  // @@protoc_insertion_point(field_mutable:tc_serialize.TransportBase.rend_set)
  return _msg;
}
inline void TransportBase::set_allocated_rend_set(::tc_serialize::RenderSettings* rend_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rend_set_);
  }
  if (rend_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rend_set));
    if (message_arena != submessage_arena) {
      rend_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rend_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rend_set_ = rend_set;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.TransportBase.rend_set)
}

// .tc_serialize.Graph graph = 5;
inline bool TransportBase::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool TransportBase::has_graph() const {
  return _internal_has_graph();
}
inline const ::tc_serialize::Graph& TransportBase::_internal_graph() const {
  const ::tc_serialize::Graph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::Graph&>(
      ::tc_serialize::_Graph_default_instance_);
}
inline const ::tc_serialize::Graph& TransportBase::graph() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TransportBase.graph)
  return _internal_graph();
}
inline void TransportBase::unsafe_arena_set_allocated_graph(
    ::tc_serialize::Graph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.TransportBase.graph)
}
inline ::tc_serialize::Graph* TransportBase::release_graph() {
  
  ::tc_serialize::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::Graph* TransportBase::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:tc_serialize.TransportBase.graph)
  
  ::tc_serialize::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::tc_serialize::Graph* TransportBase::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::Graph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::tc_serialize::Graph* TransportBase::mutable_graph() {
  ::tc_serialize::Graph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:tc_serialize.TransportBase.graph)
  return _msg;
}
inline void TransportBase::set_allocated_graph(::tc_serialize::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.TransportBase.graph)
}

// .tc_serialize.Router router = 6;
inline bool TransportBase::_internal_has_router() const {
  return this != internal_default_instance() && _impl_.router_ != nullptr;
}
inline bool TransportBase::has_router() const {
  return _internal_has_router();
}
inline const ::tc_serialize::Router& TransportBase::_internal_router() const {
  const ::tc_serialize::Router* p = _impl_.router_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::Router&>(
      ::tc_serialize::_Router_default_instance_);
}
inline const ::tc_serialize::Router& TransportBase::router() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TransportBase.router)
  return _internal_router();
}
inline void TransportBase::unsafe_arena_set_allocated_router(
    ::tc_serialize::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  _impl_.router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.TransportBase.router)
}
inline ::tc_serialize::Router* TransportBase::release_router() {
  
  ::tc_serialize::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::Router* TransportBase::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:tc_serialize.TransportBase.router)
  
  ::tc_serialize::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
  return temp;
}
inline ::tc_serialize::Router* TransportBase::_internal_mutable_router() {
  
  if (_impl_.router_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::Router>(GetArenaForAllocation());
    _impl_.router_ = p;
  }
  return _impl_.router_;
}
inline ::tc_serialize::Router* TransportBase::mutable_router() {
  ::tc_serialize::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:tc_serialize.TransportBase.router)
  return _msg;
}
inline void TransportBase::set_allocated_router(::tc_serialize::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_ = router;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.TransportBase.router)
}

// .tc_serialize.TransportRouter transport_router = 7;
inline bool TransportBase::_internal_has_transport_router() const {
  return this != internal_default_instance() && _impl_.transport_router_ != nullptr;
}
inline bool TransportBase::has_transport_router() const {
  return _internal_has_transport_router();
}
inline const ::tc_serialize::TransportRouter& TransportBase::_internal_transport_router() const {
  const ::tc_serialize::TransportRouter* p = _impl_.transport_router_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::TransportRouter&>(
      ::tc_serialize::_TransportRouter_default_instance_);
}
inline const ::tc_serialize::TransportRouter& TransportBase::transport_router() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TransportBase.transport_router)
  return _internal_transport_router();
}
inline void TransportBase::unsafe_arena_set_allocated_transport_router(
    ::tc_serialize::TransportRouter* transport_router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transport_router_);
  }
  _impl_.transport_router_ = transport_router;
  if (transport_router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.TransportBase.transport_router)
}
inline ::tc_serialize::TransportRouter* TransportBase::release_transport_router() {
  
  ::tc_serialize::TransportRouter* temp = _impl_.transport_router_;
  _impl_.transport_router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::TransportRouter* TransportBase::unsafe_arena_release_transport_router() {
  // @@protoc_insertion_point(field_release:tc_serialize.TransportBase.transport_router)
  
  ::tc_serialize::TransportRouter* temp = _impl_.transport_router_;
  _impl_.transport_router_ = nullptr;
  return temp;
}
inline ::tc_serialize::TransportRouter* TransportBase::_internal_mutable_transport_router() {
  
  if (_impl_.transport_router_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::TransportRouter>(GetArenaForAllocation());
    _impl_.transport_router_ = p;
  }
  return _impl_.transport_router_;
}
inline ::tc_serialize::TransportRouter* TransportBase::mutable_transport_router() {
  ::tc_serialize::TransportRouter* _msg = _internal_mutable_transport_router();
  // @@protoc_insertion_point(field_mutable:tc_serialize.TransportBase.transport_router)
  return _msg;
}
inline void TransportBase::set_allocated_transport_router(::tc_serialize::TransportRouter* transport_router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transport_router_);
  }
  if (transport_router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_router));
    if (message_arena != submessage_arena) {
      transport_router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport_router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transport_router_ = transport_router;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.TransportBase.transport_router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tc_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
