// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tc_serialize {
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_from_)*/0
  , /*decltype(_impl_.vertex_to_)*/0
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
PROTOBUF_CONSTEXPR IncidenceList::IncidenceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edge_id_incidence_list_)*/{}
  , /*decltype(_impl_._edge_id_incidence_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidenceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidenceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidenceListDefaultTypeInternal() {}
  union {
    IncidenceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
PROTOBUF_CONSTEXPR Graph::Graph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_.incidence_lists_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDefaultTypeInternal() {}
  union {
    Graph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDefaultTypeInternal _Graph_default_instance_;
PROTOBUF_CONSTEXPR PrevEdge::PrevEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prev_edge_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrevEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrevEdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrevEdgeDefaultTypeInternal() {}
  union {
    PrevEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrevEdgeDefaultTypeInternal _PrevEdge_default_instance_;
PROTOBUF_CONSTEXPR RouteInternalData::RouteInternalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prev_edge_)*/nullptr
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.has_v_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteInternalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteInternalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteInternalDataDefaultTypeInternal() {}
  union {
    RouteInternalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
PROTOBUF_CONSTEXPR VectorRouteInternalData::VectorRouteInternalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vector_route_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorRouteInternalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorRouteInternalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorRouteInternalDataDefaultTypeInternal() {}
  union {
    VectorRouteInternalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorRouteInternalDataDefaultTypeInternal _VectorRouteInternalData_default_instance_;
PROTOBUF_CONSTEXPR Router::Router(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routes_internal_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterDefaultTypeInternal _Router_default_instance_;
}  // namespace tc_serialize
static ::_pb::Metadata file_level_metadata_graph_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_graph_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Edge, _impl_.vertex_from_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Edge, _impl_.vertex_to_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Edge, _impl_.weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::IncidenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::IncidenceList, _impl_.edge_id_incidence_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Graph, _impl_.edges_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Graph, _impl_.incidence_lists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::PrevEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::PrevEdge, _impl_.prev_edge_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteInternalData, _impl_.has_v_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteInternalData, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteInternalData, _impl_.prev_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::VectorRouteInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::VectorRouteInternalData, _impl_.vector_route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::Router, _impl_.routes_internal_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tc_serialize::Edge)},
  { 9, -1, -1, sizeof(::tc_serialize::IncidenceList)},
  { 16, -1, -1, sizeof(::tc_serialize::Graph)},
  { 24, -1, -1, sizeof(::tc_serialize::PrevEdge)},
  { 31, -1, -1, sizeof(::tc_serialize::RouteInternalData)},
  { 40, -1, -1, sizeof(::tc_serialize::VectorRouteInternalData)},
  { 47, -1, -1, sizeof(::tc_serialize::Router)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tc_serialize::_Edge_default_instance_._instance,
  &::tc_serialize::_IncidenceList_default_instance_._instance,
  &::tc_serialize::_Graph_default_instance_._instance,
  &::tc_serialize::_PrevEdge_default_instance_._instance,
  &::tc_serialize::_RouteInternalData_default_instance_._instance,
  &::tc_serialize::_VectorRouteInternalData_default_instance_._instance,
  &::tc_serialize::_Router_default_instance_._instance,
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\014tc_serialize\">\n\004Edge\022\023\n\013v"
  "ertex_from\030\001 \001(\005\022\021\n\tvertex_to\030\002 \001(\005\022\016\n\006w"
  "eight\030\003 \001(\001\"/\n\rIncidenceList\022\036\n\026edge_id_"
  "incidence_list\030\001 \003(\005\"`\n\005Graph\022!\n\005edges\030\001"
  " \003(\0132\022.tc_serialize.Edge\0224\n\017incidence_li"
  "sts\030\002 \003(\0132\033.tc_serialize.IncidenceList\" "
  "\n\010PrevEdge\022\024\n\014prev_edge_id\030\001 \001(\005\"]\n\021Rout"
  "eInternalData\022\r\n\005has_v\030\001 \001(\010\022\016\n\006weight\030\002"
  " \001(\001\022)\n\tprev_edge\030\003 \001(\0132\026.tc_serialize.P"
  "revEdge\"P\n\027VectorRouteInternalData\0225\n\014ve"
  "ctor_route\030\001 \003(\0132\037.tc_serialize.RouteInt"
  "ernalData\"M\n\006Router\022C\n\024routes_internal_d"
  "ata\030\001 \003(\0132%.tc_serialize.VectorRouteInte"
  "rnalDatab\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_graph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_graph_2eproto = {
    false, false, 536, descriptor_table_protodef_graph_2eproto,
    "graph.proto",
    &descriptor_table_graph_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
    file_level_metadata_graph_2eproto, file_level_enum_descriptors_graph_2eproto,
    file_level_service_descriptors_graph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_graph_2eproto(&descriptor_table_graph_2eproto);
namespace tc_serialize {

// ===================================================================

class Edge::_Internal {
 public:
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_from_){}
    , decltype(_impl_.vertex_to_){}
    , decltype(_impl_.weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vertex_from_, &from._impl_.vertex_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weight_) -
    reinterpret_cast<char*>(&_impl_.vertex_from_)) + sizeof(_impl_.weight_));
  // @@protoc_insertion_point(copy_constructor:tc_serialize.Edge)
}

inline void Edge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_from_){0}
    , decltype(_impl_.vertex_to_){0}
    , decltype(_impl_.weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:tc_serialize.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vertex_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weight_) -
      reinterpret_cast<char*>(&_impl_.vertex_from_)) + sizeof(_impl_.weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vertex_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vertex_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vertex_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vertex_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vertex_from = 1;
  if (this->_internal_vertex_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vertex_from(), target);
  }

  // int32 vertex_to = 2;
  if (this->_internal_vertex_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vertex_to(), target);
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vertex_from = 1;
  if (this->_internal_vertex_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_from());
  }

  // int32 vertex_to = 2;
  if (this->_internal_vertex_to() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_to());
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }


void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge*>(&to_msg);
  auto& from = static_cast<const Edge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.Edge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vertex_from() != 0) {
    _this->_internal_set_vertex_from(from._internal_vertex_from());
  }
  if (from._internal_vertex_to() != 0) {
    _this->_internal_set_vertex_to(from._internal_vertex_to());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, _impl_.weight_)
      + sizeof(Edge::_impl_.weight_)
      - PROTOBUF_FIELD_OFFSET(Edge, _impl_.vertex_from_)>(
          reinterpret_cast<char*>(&_impl_.vertex_from_),
          reinterpret_cast<char*>(&other->_impl_.vertex_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}

// ===================================================================

class IncidenceList::_Internal {
 public:
};

IncidenceList::IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.IncidenceList)
}
IncidenceList::IncidenceList(const IncidenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidenceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_id_incidence_list_){from._impl_.edge_id_incidence_list_}
    , /*decltype(_impl_._edge_id_incidence_list_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.IncidenceList)
}

inline void IncidenceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_id_incidence_list_){arena}
    , /*decltype(_impl_._edge_id_incidence_list_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IncidenceList::~IncidenceList() {
  // @@protoc_insertion_point(destructor:tc_serialize.IncidenceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edge_id_incidence_list_.~RepeatedField();
}

void IncidenceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.IncidenceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edge_id_incidence_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidenceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 edge_id_incidence_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_edge_id_incidence_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_edge_id_incidence_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidenceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.IncidenceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 edge_id_incidence_list = 1;
  {
    int byte_size = _impl_._edge_id_incidence_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_edge_id_incidence_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.IncidenceList)
  return target;
}

size_t IncidenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.IncidenceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 edge_id_incidence_list = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.edge_id_incidence_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._edge_id_incidence_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidenceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidenceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidenceList::GetClassData() const { return &_class_data_; }


void IncidenceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidenceList*>(&to_msg);
  auto& from = static_cast<const IncidenceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.IncidenceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edge_id_incidence_list_.MergeFrom(from._impl_.edge_id_incidence_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidenceList::CopyFrom(const IncidenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.IncidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidenceList::IsInitialized() const {
  return true;
}

void IncidenceList::InternalSwap(IncidenceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edge_id_incidence_list_.InternalSwap(&other->_impl_.edge_id_incidence_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidenceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}

// ===================================================================

class Graph::_Internal {
 public:
};

Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Graph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){from._impl_.edges_}
    , decltype(_impl_.incidence_lists_){from._impl_.incidence_lists_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.Graph)
}

inline void Graph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){arena}
    , decltype(_impl_.incidence_lists_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:tc_serialize.Graph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edges_.~RepeatedPtrField();
  _impl_.incidence_lists_.~RepeatedPtrField();
}

void Graph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.Graph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edges_.Clear();
  _impl_.incidence_lists_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tc_serialize.Edge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tc_serialize.IncidenceList incidence_lists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incidence_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.Graph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tc_serialize.Edge edges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tc_serialize.IncidenceList incidence_lists = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incidence_lists_size()); i < n; i++) {
    const auto& repfield = this->_internal_incidence_lists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.Graph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tc_serialize.Edge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tc_serialize.IncidenceList incidence_lists = 2;
  total_size += 1UL * this->_internal_incidence_lists_size();
  for (const auto& msg : this->_impl_.incidence_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Graph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph::GetClassData() const { return &_class_data_; }


void Graph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Graph*>(&to_msg);
  auto& from = static_cast<const Graph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.Graph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  _this->_impl_.incidence_lists_.MergeFrom(from._impl_.incidence_lists_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
  _impl_.incidence_lists_.InternalSwap(&other->_impl_.incidence_lists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[2]);
}

// ===================================================================

class PrevEdge::_Internal {
 public:
};

PrevEdge::PrevEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.PrevEdge)
}
PrevEdge::PrevEdge(const PrevEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrevEdge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prev_edge_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.prev_edge_id_ = from._impl_.prev_edge_id_;
  // @@protoc_insertion_point(copy_constructor:tc_serialize.PrevEdge)
}

inline void PrevEdge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prev_edge_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrevEdge::~PrevEdge() {
  // @@protoc_insertion_point(destructor:tc_serialize.PrevEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrevEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrevEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrevEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.PrevEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prev_edge_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 prev_edge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.prev_edge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrevEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.PrevEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 prev_edge_id = 1;
  if (this->_internal_prev_edge_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_prev_edge_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.PrevEdge)
  return target;
}

size_t PrevEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.PrevEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 prev_edge_id = 1;
  if (this->_internal_prev_edge_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prev_edge_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrevEdge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrevEdge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrevEdge::GetClassData() const { return &_class_data_; }


void PrevEdge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrevEdge*>(&to_msg);
  auto& from = static_cast<const PrevEdge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.PrevEdge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_prev_edge_id() != 0) {
    _this->_internal_set_prev_edge_id(from._internal_prev_edge_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrevEdge::CopyFrom(const PrevEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.PrevEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevEdge::IsInitialized() const {
  return true;
}

void PrevEdge::InternalSwap(PrevEdge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.prev_edge_id_, other->_impl_.prev_edge_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevEdge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[3]);
}

// ===================================================================

class RouteInternalData::_Internal {
 public:
  static const ::tc_serialize::PrevEdge& prev_edge(const RouteInternalData* msg);
};

const ::tc_serialize::PrevEdge&
RouteInternalData::_Internal::prev_edge(const RouteInternalData* msg) {
  return *msg->_impl_.prev_edge_;
}
RouteInternalData::RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.RouteInternalData)
}
RouteInternalData::RouteInternalData(const RouteInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteInternalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prev_edge_){nullptr}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.has_v_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prev_edge()) {
    _this->_impl_.prev_edge_ = new ::tc_serialize::PrevEdge(*from._impl_.prev_edge_);
  }
  ::memcpy(&_impl_.weight_, &from._impl_.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_v_) -
    reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.has_v_));
  // @@protoc_insertion_point(copy_constructor:tc_serialize.RouteInternalData)
}

inline void RouteInternalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prev_edge_){nullptr}
    , decltype(_impl_.weight_){0}
    , decltype(_impl_.has_v_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteInternalData::~RouteInternalData() {
  // @@protoc_insertion_point(destructor:tc_serialize.RouteInternalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.prev_edge_;
}

void RouteInternalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.RouteInternalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.prev_edge_ != nullptr) {
    delete _impl_.prev_edge_;
  }
  _impl_.prev_edge_ = nullptr;
  ::memset(&_impl_.weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_v_) -
      reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.has_v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInternalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.has_v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .tc_serialize.PrevEdge prev_edge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_edge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteInternalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.RouteInternalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_v = 1;
  if (this->_internal_has_v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_v(), target);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  // .tc_serialize.PrevEdge prev_edge = 3;
  if (this->_internal_has_prev_edge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::prev_edge(this),
        _Internal::prev_edge(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.RouteInternalData)
  return target;
}

size_t RouteInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.RouteInternalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tc_serialize.PrevEdge prev_edge = 3;
  if (this->_internal_has_prev_edge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_edge_);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // bool has_v = 1;
  if (this->_internal_has_v() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteInternalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteInternalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteInternalData::GetClassData() const { return &_class_data_; }


void RouteInternalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteInternalData*>(&to_msg);
  auto& from = static_cast<const RouteInternalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.RouteInternalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prev_edge()) {
    _this->_internal_mutable_prev_edge()->::tc_serialize::PrevEdge::MergeFrom(
        from._internal_prev_edge());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_has_v() != 0) {
    _this->_internal_set_has_v(from._internal_has_v());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteInternalData::CopyFrom(const RouteInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.RouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInternalData::IsInitialized() const {
  return true;
}

void RouteInternalData::InternalSwap(RouteInternalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteInternalData, _impl_.has_v_)
      + sizeof(RouteInternalData::_impl_.has_v_)
      - PROTOBUF_FIELD_OFFSET(RouteInternalData, _impl_.prev_edge_)>(
          reinterpret_cast<char*>(&_impl_.prev_edge_),
          reinterpret_cast<char*>(&other->_impl_.prev_edge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInternalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[4]);
}

// ===================================================================

class VectorRouteInternalData::_Internal {
 public:
};

VectorRouteInternalData::VectorRouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.VectorRouteInternalData)
}
VectorRouteInternalData::VectorRouteInternalData(const VectorRouteInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorRouteInternalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_route_){from._impl_.vector_route_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.VectorRouteInternalData)
}

inline void VectorRouteInternalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_route_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorRouteInternalData::~VectorRouteInternalData() {
  // @@protoc_insertion_point(destructor:tc_serialize.VectorRouteInternalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorRouteInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vector_route_.~RepeatedPtrField();
}

void VectorRouteInternalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorRouteInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.VectorRouteInternalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vector_route_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorRouteInternalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tc_serialize.RouteInternalData vector_route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_route(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorRouteInternalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.VectorRouteInternalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tc_serialize.RouteInternalData vector_route = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vector_route_size()); i < n; i++) {
    const auto& repfield = this->_internal_vector_route(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.VectorRouteInternalData)
  return target;
}

size_t VectorRouteInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.VectorRouteInternalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tc_serialize.RouteInternalData vector_route = 1;
  total_size += 1UL * this->_internal_vector_route_size();
  for (const auto& msg : this->_impl_.vector_route_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorRouteInternalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorRouteInternalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorRouteInternalData::GetClassData() const { return &_class_data_; }


void VectorRouteInternalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorRouteInternalData*>(&to_msg);
  auto& from = static_cast<const VectorRouteInternalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.VectorRouteInternalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vector_route_.MergeFrom(from._impl_.vector_route_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorRouteInternalData::CopyFrom(const VectorRouteInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.VectorRouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorRouteInternalData::IsInitialized() const {
  return true;
}

void VectorRouteInternalData::InternalSwap(VectorRouteInternalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vector_route_.InternalSwap(&other->_impl_.vector_route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorRouteInternalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[5]);
}

// ===================================================================

class Router::_Internal {
 public:
};

Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Router* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_internal_data_){from._impl_.routes_internal_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.Router)
}

inline void Router::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_internal_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:tc_serialize.Router)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_internal_data_.~RepeatedPtrField();
}

void Router::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.Router)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routes_internal_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tc_serialize.VectorRouteInternalData routes_internal_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes_internal_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Router::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.Router)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tc_serialize.VectorRouteInternalData routes_internal_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.Router)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tc_serialize.VectorRouteInternalData routes_internal_data = 1;
  total_size += 1UL * this->_internal_routes_internal_data_size();
  for (const auto& msg : this->_impl_.routes_internal_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Router::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Router::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Router::GetClassData() const { return &_class_data_; }


void Router::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Router*>(&to_msg);
  auto& from = static_cast<const Router&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.Router)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routes_internal_data_.MergeFrom(from._impl_.routes_internal_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routes_internal_data_.InternalSwap(&other->_impl_.routes_internal_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tc_serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tc_serialize::Edge*
Arena::CreateMaybeMessage< ::tc_serialize::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::IncidenceList*
Arena::CreateMaybeMessage< ::tc_serialize::IncidenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::IncidenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::Graph*
Arena::CreateMaybeMessage< ::tc_serialize::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::Graph >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::PrevEdge*
Arena::CreateMaybeMessage< ::tc_serialize::PrevEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::PrevEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::RouteInternalData*
Arena::CreateMaybeMessage< ::tc_serialize::RouteInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::RouteInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::VectorRouteInternalData*
Arena::CreateMaybeMessage< ::tc_serialize::VectorRouteInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::VectorRouteInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::Router*
Arena::CreateMaybeMessage< ::tc_serialize::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::Router >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
