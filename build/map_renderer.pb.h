// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_renderer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5frenderer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5frenderer_2eproto;
namespace tc_serialize {
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RenderSettings;
struct RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class Rgb;
struct RgbDefaultTypeInternal;
extern RgbDefaultTypeInternal _Rgb_default_instance_;
class Rgba;
struct RgbaDefaultTypeInternal;
extern RgbaDefaultTypeInternal _Rgba_default_instance_;
}  // namespace tc_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::tc_serialize::Color* Arena::CreateMaybeMessage<::tc_serialize::Color>(Arena*);
template<> ::tc_serialize::Point* Arena::CreateMaybeMessage<::tc_serialize::Point>(Arena*);
template<> ::tc_serialize::RenderSettings* Arena::CreateMaybeMessage<::tc_serialize::RenderSettings>(Arena*);
template<> ::tc_serialize::Rgb* Arena::CreateMaybeMessage<::tc_serialize::Rgb>(Arena*);
template<> ::tc_serialize::Rgba* Arena::CreateMaybeMessage<::tc_serialize::Rgba>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tc_serialize {

// ===================================================================

class Rgb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Rgb) */ {
 public:
  inline Rgb() : Rgb(nullptr) {}
  ~Rgb() override;
  explicit PROTOBUF_CONSTEXPR Rgb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgb(const Rgb& from);
  Rgb(Rgb&& from) noexcept
    : Rgb() {
    *this = ::std::move(from);
  }

  inline Rgb& operator=(const Rgb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgb& operator=(Rgb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgb& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgb* internal_default_instance() {
    return reinterpret_cast<const Rgb*>(
               &_Rgb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Rgb& a, Rgb& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgb& from) {
    Rgb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Rgb";
  }
  protected:
  explicit Rgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
  };
  // int32 red = 1;
  void clear_red();
  int32_t red() const;
  void set_red(int32_t value);
  private:
  int32_t _internal_red() const;
  void _internal_set_red(int32_t value);
  public:

  // int32 green = 2;
  void clear_green();
  int32_t green() const;
  void set_green(int32_t value);
  private:
  int32_t _internal_green() const;
  void _internal_set_green(int32_t value);
  public:

  // int32 blue = 3;
  void clear_blue();
  int32_t blue() const;
  void set_blue(int32_t value);
  private:
  int32_t _internal_blue() const;
  void _internal_set_blue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Rgb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t red_;
    int32_t green_;
    int32_t blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class Rgba final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Rgba) */ {
 public:
  inline Rgba() : Rgba(nullptr) {}
  ~Rgba() override;
  explicit PROTOBUF_CONSTEXPR Rgba(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgba(const Rgba& from);
  Rgba(Rgba&& from) noexcept
    : Rgba() {
    *this = ::std::move(from);
  }

  inline Rgba& operator=(const Rgba& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgba& operator=(Rgba&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgba& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgba* internal_default_instance() {
    return reinterpret_cast<const Rgba*>(
               &_Rgba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rgba& a, Rgba& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgba* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgba* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgba>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgba& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgba& from) {
    Rgba::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgba* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Rgba";
  }
  protected:
  explicit Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kOpacityFieldNumber = 4,
    kBlueFieldNumber = 3,
  };
  // int32 red = 1;
  void clear_red();
  int32_t red() const;
  void set_red(int32_t value);
  private:
  int32_t _internal_red() const;
  void _internal_set_red(int32_t value);
  public:

  // int32 green = 2;
  void clear_green();
  int32_t green() const;
  void set_green(int32_t value);
  private:
  int32_t _internal_green() const;
  void _internal_set_green(int32_t value);
  public:

  // double opacity = 4;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // int32 blue = 3;
  void clear_blue();
  int32_t blue() const;
  void set_blue(int32_t value);
  private:
  int32_t _internal_blue() const;
  void _internal_set_blue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Rgba)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t red_;
    int32_t green_;
    double opacity_;
    int32_t blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  enum VariantColorsCase {
    kMonostate = 1,
    kRgbColor = 2,
    kRgbaColor = 3,
    kStringColor = 4,
    VARIANT_COLORS_NOT_SET = 0,
  };

  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonostateFieldNumber = 1,
    kRgbColorFieldNumber = 2,
    kRgbaColorFieldNumber = 3,
    kStringColorFieldNumber = 4,
  };
  // bool monostate = 1;
  bool has_monostate() const;
  private:
  bool _internal_has_monostate() const;
  public:
  void clear_monostate();
  bool monostate() const;
  void set_monostate(bool value);
  private:
  bool _internal_monostate() const;
  void _internal_set_monostate(bool value);
  public:

  // .tc_serialize.Rgb rgb_color = 2;
  bool has_rgb_color() const;
  private:
  bool _internal_has_rgb_color() const;
  public:
  void clear_rgb_color();
  const ::tc_serialize::Rgb& rgb_color() const;
  PROTOBUF_NODISCARD ::tc_serialize::Rgb* release_rgb_color();
  ::tc_serialize::Rgb* mutable_rgb_color();
  void set_allocated_rgb_color(::tc_serialize::Rgb* rgb_color);
  private:
  const ::tc_serialize::Rgb& _internal_rgb_color() const;
  ::tc_serialize::Rgb* _internal_mutable_rgb_color();
  public:
  void unsafe_arena_set_allocated_rgb_color(
      ::tc_serialize::Rgb* rgb_color);
  ::tc_serialize::Rgb* unsafe_arena_release_rgb_color();

  // .tc_serialize.Rgba rgba_color = 3;
  bool has_rgba_color() const;
  private:
  bool _internal_has_rgba_color() const;
  public:
  void clear_rgba_color();
  const ::tc_serialize::Rgba& rgba_color() const;
  PROTOBUF_NODISCARD ::tc_serialize::Rgba* release_rgba_color();
  ::tc_serialize::Rgba* mutable_rgba_color();
  void set_allocated_rgba_color(::tc_serialize::Rgba* rgba_color);
  private:
  const ::tc_serialize::Rgba& _internal_rgba_color() const;
  ::tc_serialize::Rgba* _internal_mutable_rgba_color();
  public:
  void unsafe_arena_set_allocated_rgba_color(
      ::tc_serialize::Rgba* rgba_color);
  ::tc_serialize::Rgba* unsafe_arena_release_rgba_color();

  // string string_color = 4;
  bool has_string_color() const;
  private:
  bool _internal_has_string_color() const;
  public:
  void clear_string_color();
  const std::string& string_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_color();
  PROTOBUF_NODISCARD std::string* release_string_color();
  void set_allocated_string_color(std::string* string_color);
  private:
  const std::string& _internal_string_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_color(const std::string& value);
  std::string* _internal_mutable_string_color();
  public:

  void clear_variant_colors();
  VariantColorsCase variant_colors_case() const;
  // @@protoc_insertion_point(class_scope:tc_serialize.Color)
 private:
  class _Internal;
  void set_has_monostate();
  void set_has_rgb_color();
  void set_has_rgba_color();
  void set_has_string_color();

  inline bool has_variant_colors() const;
  inline void clear_has_variant_colors();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union VariantColorsUnion {
      constexpr VariantColorsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool monostate_;
      ::tc_serialize::Rgb* rgb_color_;
      ::tc_serialize::Rgba* rgba_color_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_color_;
    } variant_colors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class RenderSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.RenderSettings) */ {
 public:
  inline RenderSettings() : RenderSettings(nullptr) {}
  ~RenderSettings() override;
  explicit PROTOBUF_CONSTEXPR RenderSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderSettings(const RenderSettings& from);
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenderSettings& from) {
    RenderSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.RenderSettings";
  }
  protected:
  explicit RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 12,
    kBusLabelOffsetFieldNumber = 7,
    kStopLabelOffsetFieldNumber = 9,
    kUnderlayerColorFieldNumber = 10,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kLineWidthFieldNumber = 4,
    kStopRadiusFieldNumber = 5,
    kBusLabelFontSizeFieldNumber = 6,
    kStopLabelFontSizeFieldNumber = 8,
    kUnderlayerWidthFieldNumber = 11,
  };
  // repeated .tc_serialize.Color color_palette = 12;
  int color_palette_size() const;
  private:
  int _internal_color_palette_size() const;
  public:
  void clear_color_palette();
  ::tc_serialize::Color* mutable_color_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Color >*
      mutable_color_palette();
  private:
  const ::tc_serialize::Color& _internal_color_palette(int index) const;
  ::tc_serialize::Color* _internal_add_color_palette();
  public:
  const ::tc_serialize::Color& color_palette(int index) const;
  ::tc_serialize::Color* add_color_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Color >&
      color_palette() const;

  // .tc_serialize.Point bus_label_offset = 7;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::tc_serialize::Point& bus_label_offset() const;
  PROTOBUF_NODISCARD ::tc_serialize::Point* release_bus_label_offset();
  ::tc_serialize::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::tc_serialize::Point* bus_label_offset);
  private:
  const ::tc_serialize::Point& _internal_bus_label_offset() const;
  ::tc_serialize::Point* _internal_mutable_bus_label_offset();
  public:
  void unsafe_arena_set_allocated_bus_label_offset(
      ::tc_serialize::Point* bus_label_offset);
  ::tc_serialize::Point* unsafe_arena_release_bus_label_offset();

  // .tc_serialize.Point stop_label_offset = 9;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::tc_serialize::Point& stop_label_offset() const;
  PROTOBUF_NODISCARD ::tc_serialize::Point* release_stop_label_offset();
  ::tc_serialize::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::tc_serialize::Point* stop_label_offset);
  private:
  const ::tc_serialize::Point& _internal_stop_label_offset() const;
  ::tc_serialize::Point* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::tc_serialize::Point* stop_label_offset);
  ::tc_serialize::Point* unsafe_arena_release_stop_label_offset();

  // .tc_serialize.Color underlayer_color = 10;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::tc_serialize::Color& underlayer_color() const;
  PROTOBUF_NODISCARD ::tc_serialize::Color* release_underlayer_color();
  ::tc_serialize::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::tc_serialize::Color* underlayer_color);
  private:
  const ::tc_serialize::Color& _internal_underlayer_color() const;
  ::tc_serialize::Color* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::tc_serialize::Color* underlayer_color);
  ::tc_serialize::Color* unsafe_arena_release_underlayer_color();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double line_width = 4;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double stop_radius = 5;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // int32 bus_label_font_size = 6;
  void clear_bus_label_font_size();
  int32_t bus_label_font_size() const;
  void set_bus_label_font_size(int32_t value);
  private:
  int32_t _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(int32_t value);
  public:

  // int32 stop_label_font_size = 8;
  void clear_stop_label_font_size();
  int32_t stop_label_font_size() const;
  void set_stop_label_font_size(int32_t value);
  private:
  int32_t _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(int32_t value);
  public:

  // double underlayer_width = 11;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.RenderSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Color > color_palette_;
    ::tc_serialize::Point* bus_label_offset_;
    ::tc_serialize::Point* stop_label_offset_;
    ::tc_serialize::Color* underlayer_color_;
    double width_;
    double height_;
    double padding_;
    double line_width_;
    double stop_radius_;
    int32_t bus_label_font_size_;
    int32_t stop_label_font_size_;
    double underlayer_width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rgb

// int32 red = 1;
inline void Rgb::clear_red() {
  _impl_.red_ = 0;
}
inline int32_t Rgb::_internal_red() const {
  return _impl_.red_;
}
inline int32_t Rgb::red() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Rgb.red)
  return _internal_red();
}
inline void Rgb::_internal_set_red(int32_t value) {
  
  _impl_.red_ = value;
}
inline void Rgb::set_red(int32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Rgb.red)
}

// int32 green = 2;
inline void Rgb::clear_green() {
  _impl_.green_ = 0;
}
inline int32_t Rgb::_internal_green() const {
  return _impl_.green_;
}
inline int32_t Rgb::green() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Rgb.green)
  return _internal_green();
}
inline void Rgb::_internal_set_green(int32_t value) {
  
  _impl_.green_ = value;
}
inline void Rgb::set_green(int32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Rgb.green)
}

// int32 blue = 3;
inline void Rgb::clear_blue() {
  _impl_.blue_ = 0;
}
inline int32_t Rgb::_internal_blue() const {
  return _impl_.blue_;
}
inline int32_t Rgb::blue() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Rgb.blue)
  return _internal_blue();
}
inline void Rgb::_internal_set_blue(int32_t value) {
  
  _impl_.blue_ = value;
}
inline void Rgb::set_blue(int32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Rgb.blue)
}

// -------------------------------------------------------------------

// Rgba

// int32 red = 1;
inline void Rgba::clear_red() {
  _impl_.red_ = 0;
}
inline int32_t Rgba::_internal_red() const {
  return _impl_.red_;
}
inline int32_t Rgba::red() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Rgba.red)
  return _internal_red();
}
inline void Rgba::_internal_set_red(int32_t value) {
  
  _impl_.red_ = value;
}
inline void Rgba::set_red(int32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Rgba.red)
}

// int32 green = 2;
inline void Rgba::clear_green() {
  _impl_.green_ = 0;
}
inline int32_t Rgba::_internal_green() const {
  return _impl_.green_;
}
inline int32_t Rgba::green() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Rgba.green)
  return _internal_green();
}
inline void Rgba::_internal_set_green(int32_t value) {
  
  _impl_.green_ = value;
}
inline void Rgba::set_green(int32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Rgba.green)
}

// int32 blue = 3;
inline void Rgba::clear_blue() {
  _impl_.blue_ = 0;
}
inline int32_t Rgba::_internal_blue() const {
  return _impl_.blue_;
}
inline int32_t Rgba::blue() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Rgba.blue)
  return _internal_blue();
}
inline void Rgba::_internal_set_blue(int32_t value) {
  
  _impl_.blue_ = value;
}
inline void Rgba::set_blue(int32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Rgba.blue)
}

// double opacity = 4;
inline void Rgba::clear_opacity() {
  _impl_.opacity_ = 0;
}
inline double Rgba::_internal_opacity() const {
  return _impl_.opacity_;
}
inline double Rgba::opacity() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Rgba.opacity)
  return _internal_opacity();
}
inline void Rgba::_internal_set_opacity(double value) {
  
  _impl_.opacity_ = value;
}
inline void Rgba::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Rgba.opacity)
}

// -------------------------------------------------------------------

// Color

// bool monostate = 1;
inline bool Color::_internal_has_monostate() const {
  return variant_colors_case() == kMonostate;
}
inline bool Color::has_monostate() const {
  return _internal_has_monostate();
}
inline void Color::set_has_monostate() {
  _impl_._oneof_case_[0] = kMonostate;
}
inline void Color::clear_monostate() {
  if (_internal_has_monostate()) {
    _impl_.variant_colors_.monostate_ = false;
    clear_has_variant_colors();
  }
}
inline bool Color::_internal_monostate() const {
  if (_internal_has_monostate()) {
    return _impl_.variant_colors_.monostate_;
  }
  return false;
}
inline void Color::_internal_set_monostate(bool value) {
  if (!_internal_has_monostate()) {
    clear_variant_colors();
    set_has_monostate();
  }
  _impl_.variant_colors_.monostate_ = value;
}
inline bool Color::monostate() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Color.monostate)
  return _internal_monostate();
}
inline void Color::set_monostate(bool value) {
  _internal_set_monostate(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Color.monostate)
}

// .tc_serialize.Rgb rgb_color = 2;
inline bool Color::_internal_has_rgb_color() const {
  return variant_colors_case() == kRgbColor;
}
inline bool Color::has_rgb_color() const {
  return _internal_has_rgb_color();
}
inline void Color::set_has_rgb_color() {
  _impl_._oneof_case_[0] = kRgbColor;
}
inline void Color::clear_rgb_color() {
  if (_internal_has_rgb_color()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.variant_colors_.rgb_color_;
    }
    clear_has_variant_colors();
  }
}
inline ::tc_serialize::Rgb* Color::release_rgb_color() {
  // @@protoc_insertion_point(field_release:tc_serialize.Color.rgb_color)
  if (_internal_has_rgb_color()) {
    clear_has_variant_colors();
    ::tc_serialize::Rgb* temp = _impl_.variant_colors_.rgb_color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_colors_.rgb_color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tc_serialize::Rgb& Color::_internal_rgb_color() const {
  return _internal_has_rgb_color()
      ? *_impl_.variant_colors_.rgb_color_
      : reinterpret_cast< ::tc_serialize::Rgb&>(::tc_serialize::_Rgb_default_instance_);
}
inline const ::tc_serialize::Rgb& Color::rgb_color() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Color.rgb_color)
  return _internal_rgb_color();
}
inline ::tc_serialize::Rgb* Color::unsafe_arena_release_rgb_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tc_serialize.Color.rgb_color)
  if (_internal_has_rgb_color()) {
    clear_has_variant_colors();
    ::tc_serialize::Rgb* temp = _impl_.variant_colors_.rgb_color_;
    _impl_.variant_colors_.rgb_color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Color::unsafe_arena_set_allocated_rgb_color(::tc_serialize::Rgb* rgb_color) {
  clear_variant_colors();
  if (rgb_color) {
    set_has_rgb_color();
    _impl_.variant_colors_.rgb_color_ = rgb_color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.Color.rgb_color)
}
inline ::tc_serialize::Rgb* Color::_internal_mutable_rgb_color() {
  if (!_internal_has_rgb_color()) {
    clear_variant_colors();
    set_has_rgb_color();
    _impl_.variant_colors_.rgb_color_ = CreateMaybeMessage< ::tc_serialize::Rgb >(GetArenaForAllocation());
  }
  return _impl_.variant_colors_.rgb_color_;
}
inline ::tc_serialize::Rgb* Color::mutable_rgb_color() {
  ::tc_serialize::Rgb* _msg = _internal_mutable_rgb_color();
  // @@protoc_insertion_point(field_mutable:tc_serialize.Color.rgb_color)
  return _msg;
}

// .tc_serialize.Rgba rgba_color = 3;
inline bool Color::_internal_has_rgba_color() const {
  return variant_colors_case() == kRgbaColor;
}
inline bool Color::has_rgba_color() const {
  return _internal_has_rgba_color();
}
inline void Color::set_has_rgba_color() {
  _impl_._oneof_case_[0] = kRgbaColor;
}
inline void Color::clear_rgba_color() {
  if (_internal_has_rgba_color()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.variant_colors_.rgba_color_;
    }
    clear_has_variant_colors();
  }
}
inline ::tc_serialize::Rgba* Color::release_rgba_color() {
  // @@protoc_insertion_point(field_release:tc_serialize.Color.rgba_color)
  if (_internal_has_rgba_color()) {
    clear_has_variant_colors();
    ::tc_serialize::Rgba* temp = _impl_.variant_colors_.rgba_color_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_colors_.rgba_color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tc_serialize::Rgba& Color::_internal_rgba_color() const {
  return _internal_has_rgba_color()
      ? *_impl_.variant_colors_.rgba_color_
      : reinterpret_cast< ::tc_serialize::Rgba&>(::tc_serialize::_Rgba_default_instance_);
}
inline const ::tc_serialize::Rgba& Color::rgba_color() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Color.rgba_color)
  return _internal_rgba_color();
}
inline ::tc_serialize::Rgba* Color::unsafe_arena_release_rgba_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tc_serialize.Color.rgba_color)
  if (_internal_has_rgba_color()) {
    clear_has_variant_colors();
    ::tc_serialize::Rgba* temp = _impl_.variant_colors_.rgba_color_;
    _impl_.variant_colors_.rgba_color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Color::unsafe_arena_set_allocated_rgba_color(::tc_serialize::Rgba* rgba_color) {
  clear_variant_colors();
  if (rgba_color) {
    set_has_rgba_color();
    _impl_.variant_colors_.rgba_color_ = rgba_color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.Color.rgba_color)
}
inline ::tc_serialize::Rgba* Color::_internal_mutable_rgba_color() {
  if (!_internal_has_rgba_color()) {
    clear_variant_colors();
    set_has_rgba_color();
    _impl_.variant_colors_.rgba_color_ = CreateMaybeMessage< ::tc_serialize::Rgba >(GetArenaForAllocation());
  }
  return _impl_.variant_colors_.rgba_color_;
}
inline ::tc_serialize::Rgba* Color::mutable_rgba_color() {
  ::tc_serialize::Rgba* _msg = _internal_mutable_rgba_color();
  // @@protoc_insertion_point(field_mutable:tc_serialize.Color.rgba_color)
  return _msg;
}

// string string_color = 4;
inline bool Color::_internal_has_string_color() const {
  return variant_colors_case() == kStringColor;
}
inline bool Color::has_string_color() const {
  return _internal_has_string_color();
}
inline void Color::set_has_string_color() {
  _impl_._oneof_case_[0] = kStringColor;
}
inline void Color::clear_string_color() {
  if (_internal_has_string_color()) {
    _impl_.variant_colors_.string_color_.Destroy();
    clear_has_variant_colors();
  }
}
inline const std::string& Color::string_color() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Color.string_color)
  return _internal_string_color();
}
template <typename ArgT0, typename... ArgT>
inline void Color::set_string_color(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_color()) {
    clear_variant_colors();
    set_has_string_color();
    _impl_.variant_colors_.string_color_.InitDefault();
  }
  _impl_.variant_colors_.string_color_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tc_serialize.Color.string_color)
}
inline std::string* Color::mutable_string_color() {
  std::string* _s = _internal_mutable_string_color();
  // @@protoc_insertion_point(field_mutable:tc_serialize.Color.string_color)
  return _s;
}
inline const std::string& Color::_internal_string_color() const {
  if (_internal_has_string_color()) {
    return _impl_.variant_colors_.string_color_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Color::_internal_set_string_color(const std::string& value) {
  if (!_internal_has_string_color()) {
    clear_variant_colors();
    set_has_string_color();
    _impl_.variant_colors_.string_color_.InitDefault();
  }
  _impl_.variant_colors_.string_color_.Set(value, GetArenaForAllocation());
}
inline std::string* Color::_internal_mutable_string_color() {
  if (!_internal_has_string_color()) {
    clear_variant_colors();
    set_has_string_color();
    _impl_.variant_colors_.string_color_.InitDefault();
  }
  return _impl_.variant_colors_.string_color_.Mutable(      GetArenaForAllocation());
}
inline std::string* Color::release_string_color() {
  // @@protoc_insertion_point(field_release:tc_serialize.Color.string_color)
  if (_internal_has_string_color()) {
    clear_has_variant_colors();
    return _impl_.variant_colors_.string_color_.Release();
  } else {
    return nullptr;
  }
}
inline void Color::set_allocated_string_color(std::string* string_color) {
  if (has_variant_colors()) {
    clear_variant_colors();
  }
  if (string_color != nullptr) {
    set_has_string_color();
    _impl_.variant_colors_.string_color_.InitAllocated(string_color, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.Color.string_color)
}

inline bool Color::has_variant_colors() const {
  return variant_colors_case() != VARIANT_COLORS_NOT_SET;
}
inline void Color::clear_has_variant_colors() {
  _impl_._oneof_case_[0] = VARIANT_COLORS_NOT_SET;
}
inline Color::VariantColorsCase Color::variant_colors_case() const {
  return Color::VariantColorsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline double Point::_internal_x() const {
  return _impl_.x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline double Point::_internal_y() const {
  return _impl_.y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Point.y)
}

// -------------------------------------------------------------------

// RenderSettings

// double width = 1;
inline void RenderSettings::clear_width() {
  _impl_.width_ = 0;
}
inline double RenderSettings::_internal_width() const {
  return _impl_.width_;
}
inline double RenderSettings::width() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.width)
  return _internal_width();
}
inline void RenderSettings::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void RenderSettings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RenderSettings.width)
}

// double height = 2;
inline void RenderSettings::clear_height() {
  _impl_.height_ = 0;
}
inline double RenderSettings::_internal_height() const {
  return _impl_.height_;
}
inline double RenderSettings::height() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.height)
  return _internal_height();
}
inline void RenderSettings::_internal_set_height(double value) {
  
  _impl_.height_ = value;
}
inline void RenderSettings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RenderSettings.height)
}

// double padding = 3;
inline void RenderSettings::clear_padding() {
  _impl_.padding_ = 0;
}
inline double RenderSettings::_internal_padding() const {
  return _impl_.padding_;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.padding)
  return _internal_padding();
}
inline void RenderSettings::_internal_set_padding(double value) {
  
  _impl_.padding_ = value;
}
inline void RenderSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RenderSettings.padding)
}

// double line_width = 4;
inline void RenderSettings::clear_line_width() {
  _impl_.line_width_ = 0;
}
inline double RenderSettings::_internal_line_width() const {
  return _impl_.line_width_;
}
inline double RenderSettings::line_width() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.line_width)
  return _internal_line_width();
}
inline void RenderSettings::_internal_set_line_width(double value) {
  
  _impl_.line_width_ = value;
}
inline void RenderSettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RenderSettings.line_width)
}

// double stop_radius = 5;
inline void RenderSettings::clear_stop_radius() {
  _impl_.stop_radius_ = 0;
}
inline double RenderSettings::_internal_stop_radius() const {
  return _impl_.stop_radius_;
}
inline double RenderSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.stop_radius)
  return _internal_stop_radius();
}
inline void RenderSettings::_internal_set_stop_radius(double value) {
  
  _impl_.stop_radius_ = value;
}
inline void RenderSettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RenderSettings.stop_radius)
}

// int32 bus_label_font_size = 6;
inline void RenderSettings::clear_bus_label_font_size() {
  _impl_.bus_label_font_size_ = 0;
}
inline int32_t RenderSettings::_internal_bus_label_font_size() const {
  return _impl_.bus_label_font_size_;
}
inline int32_t RenderSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void RenderSettings::_internal_set_bus_label_font_size(int32_t value) {
  
  _impl_.bus_label_font_size_ = value;
}
inline void RenderSettings::set_bus_label_font_size(int32_t value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RenderSettings.bus_label_font_size)
}

// .tc_serialize.Point bus_label_offset = 7;
inline bool RenderSettings::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && _impl_.bus_label_offset_ != nullptr;
}
inline bool RenderSettings::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline void RenderSettings::clear_bus_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.bus_label_offset_ != nullptr) {
    delete _impl_.bus_label_offset_;
  }
  _impl_.bus_label_offset_ = nullptr;
}
inline const ::tc_serialize::Point& RenderSettings::_internal_bus_label_offset() const {
  const ::tc_serialize::Point* p = _impl_.bus_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::Point&>(
      ::tc_serialize::_Point_default_instance_);
}
inline const ::tc_serialize::Point& RenderSettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_bus_label_offset(
    ::tc_serialize::Point* bus_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bus_label_offset_);
  }
  _impl_.bus_label_offset_ = bus_label_offset;
  if (bus_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.RenderSettings.bus_label_offset)
}
inline ::tc_serialize::Point* RenderSettings::release_bus_label_offset() {
  
  ::tc_serialize::Point* temp = _impl_.bus_label_offset_;
  _impl_.bus_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::Point* RenderSettings::unsafe_arena_release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:tc_serialize.RenderSettings.bus_label_offset)
  
  ::tc_serialize::Point* temp = _impl_.bus_label_offset_;
  _impl_.bus_label_offset_ = nullptr;
  return temp;
}
inline ::tc_serialize::Point* RenderSettings::_internal_mutable_bus_label_offset() {
  
  if (_impl_.bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::Point>(GetArenaForAllocation());
    _impl_.bus_label_offset_ = p;
  }
  return _impl_.bus_label_offset_;
}
inline ::tc_serialize::Point* RenderSettings::mutable_bus_label_offset() {
  ::tc_serialize::Point* _msg = _internal_mutable_bus_label_offset();
  // @@protoc_insertion_point(field_mutable:tc_serialize.RenderSettings.bus_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_bus_label_offset(::tc_serialize::Point* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bus_label_offset_;
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus_label_offset);
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.RenderSettings.bus_label_offset)
}

// int32 stop_label_font_size = 8;
inline void RenderSettings::clear_stop_label_font_size() {
  _impl_.stop_label_font_size_ = 0;
}
inline int32_t RenderSettings::_internal_stop_label_font_size() const {
  return _impl_.stop_label_font_size_;
}
inline int32_t RenderSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void RenderSettings::_internal_set_stop_label_font_size(int32_t value) {
  
  _impl_.stop_label_font_size_ = value;
}
inline void RenderSettings::set_stop_label_font_size(int32_t value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RenderSettings.stop_label_font_size)
}

// .tc_serialize.Point stop_label_offset = 9;
inline bool RenderSettings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && _impl_.stop_label_offset_ != nullptr;
}
inline bool RenderSettings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline void RenderSettings::clear_stop_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.stop_label_offset_ != nullptr) {
    delete _impl_.stop_label_offset_;
  }
  _impl_.stop_label_offset_ = nullptr;
}
inline const ::tc_serialize::Point& RenderSettings::_internal_stop_label_offset() const {
  const ::tc_serialize::Point* p = _impl_.stop_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::Point&>(
      ::tc_serialize::_Point_default_instance_);
}
inline const ::tc_serialize::Point& RenderSettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_stop_label_offset(
    ::tc_serialize::Point* stop_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_label_offset_);
  }
  _impl_.stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.RenderSettings.stop_label_offset)
}
inline ::tc_serialize::Point* RenderSettings::release_stop_label_offset() {
  
  ::tc_serialize::Point* temp = _impl_.stop_label_offset_;
  _impl_.stop_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::Point* RenderSettings::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:tc_serialize.RenderSettings.stop_label_offset)
  
  ::tc_serialize::Point* temp = _impl_.stop_label_offset_;
  _impl_.stop_label_offset_ = nullptr;
  return temp;
}
inline ::tc_serialize::Point* RenderSettings::_internal_mutable_stop_label_offset() {
  
  if (_impl_.stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::Point>(GetArenaForAllocation());
    _impl_.stop_label_offset_ = p;
  }
  return _impl_.stop_label_offset_;
}
inline ::tc_serialize::Point* RenderSettings::mutable_stop_label_offset() {
  ::tc_serialize::Point* _msg = _internal_mutable_stop_label_offset();
  // @@protoc_insertion_point(field_mutable:tc_serialize.RenderSettings.stop_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_stop_label_offset(::tc_serialize::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stop_label_offset_;
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_label_offset);
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.RenderSettings.stop_label_offset)
}

// .tc_serialize.Color underlayer_color = 10;
inline bool RenderSettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && _impl_.underlayer_color_ != nullptr;
}
inline bool RenderSettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline void RenderSettings::clear_underlayer_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
}
inline const ::tc_serialize::Color& RenderSettings::_internal_underlayer_color() const {
  const ::tc_serialize::Color* p = _impl_.underlayer_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::Color&>(
      ::tc_serialize::_Color_default_instance_);
}
inline const ::tc_serialize::Color& RenderSettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.underlayer_color)
  return _internal_underlayer_color();
}
inline void RenderSettings::unsafe_arena_set_allocated_underlayer_color(
    ::tc_serialize::Color* underlayer_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlayer_color_);
  }
  _impl_.underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.RenderSettings.underlayer_color)
}
inline ::tc_serialize::Color* RenderSettings::release_underlayer_color() {
  
  ::tc_serialize::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::Color* RenderSettings::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:tc_serialize.RenderSettings.underlayer_color)
  
  ::tc_serialize::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
  return temp;
}
inline ::tc_serialize::Color* RenderSettings::_internal_mutable_underlayer_color() {
  
  if (_impl_.underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::Color>(GetArenaForAllocation());
    _impl_.underlayer_color_ = p;
  }
  return _impl_.underlayer_color_;
}
inline ::tc_serialize::Color* RenderSettings::mutable_underlayer_color() {
  ::tc_serialize::Color* _msg = _internal_mutable_underlayer_color();
  // @@protoc_insertion_point(field_mutable:tc_serialize.RenderSettings.underlayer_color)
  return _msg;
}
inline void RenderSettings::set_allocated_underlayer_color(::tc_serialize::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.underlayer_color_;
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlayer_color);
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.RenderSettings.underlayer_color)
}

// double underlayer_width = 11;
inline void RenderSettings::clear_underlayer_width() {
  _impl_.underlayer_width_ = 0;
}
inline double RenderSettings::_internal_underlayer_width() const {
  return _impl_.underlayer_width_;
}
inline double RenderSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void RenderSettings::_internal_set_underlayer_width(double value) {
  
  _impl_.underlayer_width_ = value;
}
inline void RenderSettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RenderSettings.underlayer_width)
}

// repeated .tc_serialize.Color color_palette = 12;
inline int RenderSettings::_internal_color_palette_size() const {
  return _impl_.color_palette_.size();
}
inline int RenderSettings::color_palette_size() const {
  return _internal_color_palette_size();
}
inline void RenderSettings::clear_color_palette() {
  _impl_.color_palette_.Clear();
}
inline ::tc_serialize::Color* RenderSettings::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.RenderSettings.color_palette)
  return _impl_.color_palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Color >*
RenderSettings::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.RenderSettings.color_palette)
  return &_impl_.color_palette_;
}
inline const ::tc_serialize::Color& RenderSettings::_internal_color_palette(int index) const {
  return _impl_.color_palette_.Get(index);
}
inline const ::tc_serialize::Color& RenderSettings::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.RenderSettings.color_palette)
  return _internal_color_palette(index);
}
inline ::tc_serialize::Color* RenderSettings::_internal_add_color_palette() {
  return _impl_.color_palette_.Add();
}
inline ::tc_serialize::Color* RenderSettings::add_color_palette() {
  ::tc_serialize::Color* _add = _internal_add_color_palette();
  // @@protoc_insertion_point(field_add:tc_serialize.RenderSettings.color_palette)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Color >&
RenderSettings::color_palette() const {
  // @@protoc_insertion_point(field_list:tc_serialize.RenderSettings.color_palette)
  return _impl_.color_palette_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tc_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
