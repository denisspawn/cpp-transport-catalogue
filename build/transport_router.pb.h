// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace tc_serialize {
class RouterSettings;
struct RouterSettingsDefaultTypeInternal;
extern RouterSettingsDefaultTypeInternal _RouterSettings_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace tc_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::tc_serialize::RouterSettings* Arena::CreateMaybeMessage<::tc_serialize::RouterSettings>(Arena*);
template<> ::tc_serialize::TransportRouter* Arena::CreateMaybeMessage<::tc_serialize::TransportRouter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tc_serialize {

// ===================================================================

class RouterSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.RouterSettings) */ {
 public:
  inline RouterSettings() : RouterSettings(nullptr) {}
  ~RouterSettings() override;
  explicit PROTOBUF_CONSTEXPR RouterSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouterSettings(const RouterSettings& from);
  RouterSettings(RouterSettings&& from) noexcept
    : RouterSettings() {
    *this = ::std::move(from);
  }

  inline RouterSettings& operator=(const RouterSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouterSettings& operator=(RouterSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouterSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouterSettings* internal_default_instance() {
    return reinterpret_cast<const RouterSettings*>(
               &_RouterSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouterSettings& a, RouterSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RouterSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouterSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouterSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouterSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouterSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouterSettings& from) {
    RouterSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouterSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.RouterSettings";
  }
  protected:
  explicit RouterSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusWaitTimeFieldNumber = 1,
    kBusVelocityFieldNumber = 2,
  };
  // double bus_wait_time = 1;
  void clear_bus_wait_time();
  double bus_wait_time() const;
  void set_bus_wait_time(double value);
  private:
  double _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(double value);
  public:

  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.RouterSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_wait_time_;
    double bus_velocity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit PROTOBUF_CONSTEXPR TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportRouter& from) {
    TransportRouter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutSetFieldNumber = 3,
  };
  // .tc_serialize.RouterSettings rout_set = 3;
  bool has_rout_set() const;
  private:
  bool _internal_has_rout_set() const;
  public:
  void clear_rout_set();
  const ::tc_serialize::RouterSettings& rout_set() const;
  PROTOBUF_NODISCARD ::tc_serialize::RouterSettings* release_rout_set();
  ::tc_serialize::RouterSettings* mutable_rout_set();
  void set_allocated_rout_set(::tc_serialize::RouterSettings* rout_set);
  private:
  const ::tc_serialize::RouterSettings& _internal_rout_set() const;
  ::tc_serialize::RouterSettings* _internal_mutable_rout_set();
  public:
  void unsafe_arena_set_allocated_rout_set(
      ::tc_serialize::RouterSettings* rout_set);
  ::tc_serialize::RouterSettings* unsafe_arena_release_rout_set();

  // @@protoc_insertion_point(class_scope:tc_serialize.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tc_serialize::RouterSettings* rout_set_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouterSettings

// double bus_wait_time = 1;
inline void RouterSettings::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = 0;
}
inline double RouterSettings::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline double RouterSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouterSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RouterSettings::_internal_set_bus_wait_time(double value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void RouterSettings::set_bus_wait_time(double value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RouterSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RouterSettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RouterSettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RouterSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouterSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RouterSettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RouterSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RouterSettings.bus_velocity)
}

// -------------------------------------------------------------------

// TransportRouter

// .tc_serialize.RouterSettings rout_set = 3;
inline bool TransportRouter::_internal_has_rout_set() const {
  return this != internal_default_instance() && _impl_.rout_set_ != nullptr;
}
inline bool TransportRouter::has_rout_set() const {
  return _internal_has_rout_set();
}
inline void TransportRouter::clear_rout_set() {
  if (GetArenaForAllocation() == nullptr && _impl_.rout_set_ != nullptr) {
    delete _impl_.rout_set_;
  }
  _impl_.rout_set_ = nullptr;
}
inline const ::tc_serialize::RouterSettings& TransportRouter::_internal_rout_set() const {
  const ::tc_serialize::RouterSettings* p = _impl_.rout_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::RouterSettings&>(
      ::tc_serialize::_RouterSettings_default_instance_);
}
inline const ::tc_serialize::RouterSettings& TransportRouter::rout_set() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TransportRouter.rout_set)
  return _internal_rout_set();
}
inline void TransportRouter::unsafe_arena_set_allocated_rout_set(
    ::tc_serialize::RouterSettings* rout_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rout_set_);
  }
  _impl_.rout_set_ = rout_set;
  if (rout_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.TransportRouter.rout_set)
}
inline ::tc_serialize::RouterSettings* TransportRouter::release_rout_set() {
  
  ::tc_serialize::RouterSettings* temp = _impl_.rout_set_;
  _impl_.rout_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::RouterSettings* TransportRouter::unsafe_arena_release_rout_set() {
  // @@protoc_insertion_point(field_release:tc_serialize.TransportRouter.rout_set)
  
  ::tc_serialize::RouterSettings* temp = _impl_.rout_set_;
  _impl_.rout_set_ = nullptr;
  return temp;
}
inline ::tc_serialize::RouterSettings* TransportRouter::_internal_mutable_rout_set() {
  
  if (_impl_.rout_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::RouterSettings>(GetArenaForAllocation());
    _impl_.rout_set_ = p;
  }
  return _impl_.rout_set_;
}
inline ::tc_serialize::RouterSettings* TransportRouter::mutable_rout_set() {
  ::tc_serialize::RouterSettings* _msg = _internal_mutable_rout_set();
  // @@protoc_insertion_point(field_mutable:tc_serialize.TransportRouter.rout_set)
  return _msg;
}
inline void TransportRouter::set_allocated_rout_set(::tc_serialize::RouterSettings* rout_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rout_set_;
  }
  if (rout_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rout_set);
    if (message_arena != submessage_arena) {
      rout_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rout_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rout_set_ = rout_set;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.TransportRouter.rout_set)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tc_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
