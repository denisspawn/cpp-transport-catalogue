// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace tc_serialize {
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class Graph;
struct GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class IncidenceList;
struct IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
class PrevEdge;
struct PrevEdgeDefaultTypeInternal;
extern PrevEdgeDefaultTypeInternal _PrevEdge_default_instance_;
class RouteInternalData;
struct RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class VectorRouteInternalData;
struct VectorRouteInternalDataDefaultTypeInternal;
extern VectorRouteInternalDataDefaultTypeInternal _VectorRouteInternalData_default_instance_;
}  // namespace tc_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::tc_serialize::Edge* Arena::CreateMaybeMessage<::tc_serialize::Edge>(Arena*);
template<> ::tc_serialize::Graph* Arena::CreateMaybeMessage<::tc_serialize::Graph>(Arena*);
template<> ::tc_serialize::IncidenceList* Arena::CreateMaybeMessage<::tc_serialize::IncidenceList>(Arena*);
template<> ::tc_serialize::PrevEdge* Arena::CreateMaybeMessage<::tc_serialize::PrevEdge>(Arena*);
template<> ::tc_serialize::RouteInternalData* Arena::CreateMaybeMessage<::tc_serialize::RouteInternalData>(Arena*);
template<> ::tc_serialize::Router* Arena::CreateMaybeMessage<::tc_serialize::Router>(Arena*);
template<> ::tc_serialize::VectorRouteInternalData* Arena::CreateMaybeMessage<::tc_serialize::VectorRouteInternalData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tc_serialize {

// ===================================================================

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexFromFieldNumber = 1,
    kVertexToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // int32 vertex_from = 1;
  void clear_vertex_from();
  int32_t vertex_from() const;
  void set_vertex_from(int32_t value);
  private:
  int32_t _internal_vertex_from() const;
  void _internal_set_vertex_from(int32_t value);
  public:

  // int32 vertex_to = 2;
  void clear_vertex_to();
  int32_t vertex_to() const;
  void set_vertex_to(int32_t value);
  private:
  int32_t _internal_vertex_to() const;
  void _internal_set_vertex_to(int32_t value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t vertex_from_;
    int32_t vertex_to_;
    double weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.IncidenceList) */ {
 public:
  inline IncidenceList() : IncidenceList(nullptr) {}
  ~IncidenceList() override;
  explicit PROTOBUF_CONSTEXPR IncidenceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidenceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncidenceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IncidenceList& from) {
    IncidenceList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.IncidenceList";
  }
  protected:
  explicit IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeIdIncidenceListFieldNumber = 1,
  };
  // repeated int32 edge_id_incidence_list = 1;
  int edge_id_incidence_list_size() const;
  private:
  int _internal_edge_id_incidence_list_size() const;
  public:
  void clear_edge_id_incidence_list();
  private:
  int32_t _internal_edge_id_incidence_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_edge_id_incidence_list() const;
  void _internal_add_edge_id_incidence_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_edge_id_incidence_list();
  public:
  int32_t edge_id_incidence_list(int index) const;
  void set_edge_id_incidence_list(int index, int32_t value);
  void add_edge_id_incidence_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      edge_id_incidence_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_edge_id_incidence_list();

  // @@protoc_insertion_point(class_scope:tc_serialize.IncidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > edge_id_incidence_list_;
    mutable std::atomic<int> _edge_id_incidence_list_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Graph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  ~Graph() override;
  explicit PROTOBUF_CONSTEXPR Graph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Graph& from) {
    Graph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kIncidenceListsFieldNumber = 2,
  };
  // repeated .tc_serialize.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::tc_serialize::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Edge >*
      mutable_edges();
  private:
  const ::tc_serialize::Edge& _internal_edges(int index) const;
  ::tc_serialize::Edge* _internal_add_edges();
  public:
  const ::tc_serialize::Edge& edges(int index) const;
  ::tc_serialize::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Edge >&
      edges() const;

  // repeated .tc_serialize.IncidenceList incidence_lists = 2;
  int incidence_lists_size() const;
  private:
  int _internal_incidence_lists_size() const;
  public:
  void clear_incidence_lists();
  ::tc_serialize::IncidenceList* mutable_incidence_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncidenceList >*
      mutable_incidence_lists();
  private:
  const ::tc_serialize::IncidenceList& _internal_incidence_lists(int index) const;
  ::tc_serialize::IncidenceList* _internal_add_incidence_lists();
  public:
  const ::tc_serialize::IncidenceList& incidence_lists(int index) const;
  ::tc_serialize::IncidenceList* add_incidence_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncidenceList >&
      incidence_lists() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Edge > edges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncidenceList > incidence_lists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class PrevEdge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.PrevEdge) */ {
 public:
  inline PrevEdge() : PrevEdge(nullptr) {}
  ~PrevEdge() override;
  explicit PROTOBUF_CONSTEXPR PrevEdge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrevEdge(const PrevEdge& from);
  PrevEdge(PrevEdge&& from) noexcept
    : PrevEdge() {
    *this = ::std::move(from);
  }

  inline PrevEdge& operator=(const PrevEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevEdge& operator=(PrevEdge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrevEdge& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrevEdge* internal_default_instance() {
    return reinterpret_cast<const PrevEdge*>(
               &_PrevEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrevEdge& a, PrevEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevEdge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevEdge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrevEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrevEdge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrevEdge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrevEdge& from) {
    PrevEdge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevEdge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.PrevEdge";
  }
  protected:
  explicit PrevEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevEdgeIdFieldNumber = 1,
  };
  // int32 prev_edge_id = 1;
  void clear_prev_edge_id();
  int32_t prev_edge_id() const;
  void set_prev_edge_id(int32_t value);
  private:
  int32_t _internal_prev_edge_id() const;
  void _internal_set_prev_edge_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.PrevEdge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t prev_edge_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.RouteInternalData) */ {
 public:
  inline RouteInternalData() : RouteInternalData(nullptr) {}
  ~RouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR RouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteInternalData& from) {
    RouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.RouteInternalData";
  }
  protected:
  explicit RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevEdgeFieldNumber = 3,
    kWeightFieldNumber = 2,
    kHasVFieldNumber = 1,
  };
  // .tc_serialize.PrevEdge prev_edge = 3;
  bool has_prev_edge() const;
  private:
  bool _internal_has_prev_edge() const;
  public:
  void clear_prev_edge();
  const ::tc_serialize::PrevEdge& prev_edge() const;
  PROTOBUF_NODISCARD ::tc_serialize::PrevEdge* release_prev_edge();
  ::tc_serialize::PrevEdge* mutable_prev_edge();
  void set_allocated_prev_edge(::tc_serialize::PrevEdge* prev_edge);
  private:
  const ::tc_serialize::PrevEdge& _internal_prev_edge() const;
  ::tc_serialize::PrevEdge* _internal_mutable_prev_edge();
  public:
  void unsafe_arena_set_allocated_prev_edge(
      ::tc_serialize::PrevEdge* prev_edge);
  ::tc_serialize::PrevEdge* unsafe_arena_release_prev_edge();

  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // bool has_v = 1;
  void clear_has_v();
  bool has_v() const;
  void set_has_v(bool value);
  private:
  bool _internal_has_v() const;
  void _internal_set_has_v(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.RouteInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tc_serialize::PrevEdge* prev_edge_;
    double weight_;
    bool has_v_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class VectorRouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.VectorRouteInternalData) */ {
 public:
  inline VectorRouteInternalData() : VectorRouteInternalData(nullptr) {}
  ~VectorRouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR VectorRouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorRouteInternalData(const VectorRouteInternalData& from);
  VectorRouteInternalData(VectorRouteInternalData&& from) noexcept
    : VectorRouteInternalData() {
    *this = ::std::move(from);
  }

  inline VectorRouteInternalData& operator=(const VectorRouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorRouteInternalData& operator=(VectorRouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorRouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorRouteInternalData* internal_default_instance() {
    return reinterpret_cast<const VectorRouteInternalData*>(
               &_VectorRouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VectorRouteInternalData& a, VectorRouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorRouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorRouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorRouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorRouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorRouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorRouteInternalData& from) {
    VectorRouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorRouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.VectorRouteInternalData";
  }
  protected:
  explicit VectorRouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorRouteFieldNumber = 1,
  };
  // repeated .tc_serialize.RouteInternalData vector_route = 1;
  int vector_route_size() const;
  private:
  int _internal_vector_route_size() const;
  public:
  void clear_vector_route();
  ::tc_serialize::RouteInternalData* mutable_vector_route(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteInternalData >*
      mutable_vector_route();
  private:
  const ::tc_serialize::RouteInternalData& _internal_vector_route(int index) const;
  ::tc_serialize::RouteInternalData* _internal_add_vector_route();
  public:
  const ::tc_serialize::RouteInternalData& vector_route(int index) const;
  ::tc_serialize::RouteInternalData* add_vector_route();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteInternalData >&
      vector_route() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.VectorRouteInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteInternalData > vector_route_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Router final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  ~Router() override;
  explicit PROTOBUF_CONSTEXPR Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Router& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Router& from) {
    Router::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesInternalDataFieldNumber = 1,
  };
  // repeated .tc_serialize.VectorRouteInternalData routes_internal_data = 1;
  int routes_internal_data_size() const;
  private:
  int _internal_routes_internal_data_size() const;
  public:
  void clear_routes_internal_data();
  ::tc_serialize::VectorRouteInternalData* mutable_routes_internal_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VectorRouteInternalData >*
      mutable_routes_internal_data();
  private:
  const ::tc_serialize::VectorRouteInternalData& _internal_routes_internal_data(int index) const;
  ::tc_serialize::VectorRouteInternalData* _internal_add_routes_internal_data();
  public:
  const ::tc_serialize::VectorRouteInternalData& routes_internal_data(int index) const;
  ::tc_serialize::VectorRouteInternalData* add_routes_internal_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VectorRouteInternalData >&
      routes_internal_data() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VectorRouteInternalData > routes_internal_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Edge

// int32 vertex_from = 1;
inline void Edge::clear_vertex_from() {
  _impl_.vertex_from_ = 0;
}
inline int32_t Edge::_internal_vertex_from() const {
  return _impl_.vertex_from_;
}
inline int32_t Edge::vertex_from() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Edge.vertex_from)
  return _internal_vertex_from();
}
inline void Edge::_internal_set_vertex_from(int32_t value) {
  
  _impl_.vertex_from_ = value;
}
inline void Edge::set_vertex_from(int32_t value) {
  _internal_set_vertex_from(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Edge.vertex_from)
}

// int32 vertex_to = 2;
inline void Edge::clear_vertex_to() {
  _impl_.vertex_to_ = 0;
}
inline int32_t Edge::_internal_vertex_to() const {
  return _impl_.vertex_to_;
}
inline int32_t Edge::vertex_to() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Edge.vertex_to)
  return _internal_vertex_to();
}
inline void Edge::_internal_set_vertex_to(int32_t value) {
  
  _impl_.vertex_to_ = value;
}
inline void Edge::set_vertex_to(int32_t value) {
  _internal_set_vertex_to(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Edge.vertex_to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  _impl_.weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return _impl_.weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Edge.weight)
}

// -------------------------------------------------------------------

// IncidenceList

// repeated int32 edge_id_incidence_list = 1;
inline int IncidenceList::_internal_edge_id_incidence_list_size() const {
  return _impl_.edge_id_incidence_list_.size();
}
inline int IncidenceList::edge_id_incidence_list_size() const {
  return _internal_edge_id_incidence_list_size();
}
inline void IncidenceList::clear_edge_id_incidence_list() {
  _impl_.edge_id_incidence_list_.Clear();
}
inline int32_t IncidenceList::_internal_edge_id_incidence_list(int index) const {
  return _impl_.edge_id_incidence_list_.Get(index);
}
inline int32_t IncidenceList::edge_id_incidence_list(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.IncidenceList.edge_id_incidence_list)
  return _internal_edge_id_incidence_list(index);
}
inline void IncidenceList::set_edge_id_incidence_list(int index, int32_t value) {
  _impl_.edge_id_incidence_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:tc_serialize.IncidenceList.edge_id_incidence_list)
}
inline void IncidenceList::_internal_add_edge_id_incidence_list(int32_t value) {
  _impl_.edge_id_incidence_list_.Add(value);
}
inline void IncidenceList::add_edge_id_incidence_list(int32_t value) {
  _internal_add_edge_id_incidence_list(value);
  // @@protoc_insertion_point(field_add:tc_serialize.IncidenceList.edge_id_incidence_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
IncidenceList::_internal_edge_id_incidence_list() const {
  return _impl_.edge_id_incidence_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
IncidenceList::edge_id_incidence_list() const {
  // @@protoc_insertion_point(field_list:tc_serialize.IncidenceList.edge_id_incidence_list)
  return _internal_edge_id_incidence_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
IncidenceList::_internal_mutable_edge_id_incidence_list() {
  return &_impl_.edge_id_incidence_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
IncidenceList::mutable_edge_id_incidence_list() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.IncidenceList.edge_id_incidence_list)
  return _internal_mutable_edge_id_incidence_list();
}

// -------------------------------------------------------------------

// Graph

// repeated .tc_serialize.Edge edges = 1;
inline int Graph::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int Graph::edges_size() const {
  return _internal_edges_size();
}
inline void Graph::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::tc_serialize::Edge* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.Graph.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Edge >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.Graph.edges)
  return &_impl_.edges_;
}
inline const ::tc_serialize::Edge& Graph::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::tc_serialize::Edge& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.Graph.edges)
  return _internal_edges(index);
}
inline ::tc_serialize::Edge* Graph::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::tc_serialize::Edge* Graph::add_edges() {
  ::tc_serialize::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:tc_serialize.Graph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Edge >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:tc_serialize.Graph.edges)
  return _impl_.edges_;
}

// repeated .tc_serialize.IncidenceList incidence_lists = 2;
inline int Graph::_internal_incidence_lists_size() const {
  return _impl_.incidence_lists_.size();
}
inline int Graph::incidence_lists_size() const {
  return _internal_incidence_lists_size();
}
inline void Graph::clear_incidence_lists() {
  _impl_.incidence_lists_.Clear();
}
inline ::tc_serialize::IncidenceList* Graph::mutable_incidence_lists(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.Graph.incidence_lists)
  return _impl_.incidence_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncidenceList >*
Graph::mutable_incidence_lists() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.Graph.incidence_lists)
  return &_impl_.incidence_lists_;
}
inline const ::tc_serialize::IncidenceList& Graph::_internal_incidence_lists(int index) const {
  return _impl_.incidence_lists_.Get(index);
}
inline const ::tc_serialize::IncidenceList& Graph::incidence_lists(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.Graph.incidence_lists)
  return _internal_incidence_lists(index);
}
inline ::tc_serialize::IncidenceList* Graph::_internal_add_incidence_lists() {
  return _impl_.incidence_lists_.Add();
}
inline ::tc_serialize::IncidenceList* Graph::add_incidence_lists() {
  ::tc_serialize::IncidenceList* _add = _internal_add_incidence_lists();
  // @@protoc_insertion_point(field_add:tc_serialize.Graph.incidence_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncidenceList >&
Graph::incidence_lists() const {
  // @@protoc_insertion_point(field_list:tc_serialize.Graph.incidence_lists)
  return _impl_.incidence_lists_;
}

// -------------------------------------------------------------------

// PrevEdge

// int32 prev_edge_id = 1;
inline void PrevEdge::clear_prev_edge_id() {
  _impl_.prev_edge_id_ = 0;
}
inline int32_t PrevEdge::_internal_prev_edge_id() const {
  return _impl_.prev_edge_id_;
}
inline int32_t PrevEdge::prev_edge_id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.PrevEdge.prev_edge_id)
  return _internal_prev_edge_id();
}
inline void PrevEdge::_internal_set_prev_edge_id(int32_t value) {
  
  _impl_.prev_edge_id_ = value;
}
inline void PrevEdge::set_prev_edge_id(int32_t value) {
  _internal_set_prev_edge_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.PrevEdge.prev_edge_id)
}

// -------------------------------------------------------------------

// RouteInternalData

// bool has_v = 1;
inline void RouteInternalData::clear_has_v() {
  _impl_.has_v_ = false;
}
inline bool RouteInternalData::_internal_has_v() const {
  return _impl_.has_v_;
}
inline bool RouteInternalData::has_v() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouteInternalData.has_v)
  return _internal_has_v();
}
inline void RouteInternalData::_internal_set_has_v(bool value) {
  
  _impl_.has_v_ = value;
}
inline void RouteInternalData::set_has_v(bool value) {
  _internal_set_has_v(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RouteInternalData.has_v)
}

// double weight = 2;
inline void RouteInternalData::clear_weight() {
  _impl_.weight_ = 0;
}
inline double RouteInternalData::_internal_weight() const {
  return _impl_.weight_;
}
inline double RouteInternalData::weight() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouteInternalData.weight)
  return _internal_weight();
}
inline void RouteInternalData::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void RouteInternalData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RouteInternalData.weight)
}

// .tc_serialize.PrevEdge prev_edge = 3;
inline bool RouteInternalData::_internal_has_prev_edge() const {
  return this != internal_default_instance() && _impl_.prev_edge_ != nullptr;
}
inline bool RouteInternalData::has_prev_edge() const {
  return _internal_has_prev_edge();
}
inline void RouteInternalData::clear_prev_edge() {
  if (GetArenaForAllocation() == nullptr && _impl_.prev_edge_ != nullptr) {
    delete _impl_.prev_edge_;
  }
  _impl_.prev_edge_ = nullptr;
}
inline const ::tc_serialize::PrevEdge& RouteInternalData::_internal_prev_edge() const {
  const ::tc_serialize::PrevEdge* p = _impl_.prev_edge_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::PrevEdge&>(
      ::tc_serialize::_PrevEdge_default_instance_);
}
inline const ::tc_serialize::PrevEdge& RouteInternalData::prev_edge() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouteInternalData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteInternalData::unsafe_arena_set_allocated_prev_edge(
    ::tc_serialize::PrevEdge* prev_edge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_edge_);
  }
  _impl_.prev_edge_ = prev_edge;
  if (prev_edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.RouteInternalData.prev_edge)
}
inline ::tc_serialize::PrevEdge* RouteInternalData::release_prev_edge() {
  
  ::tc_serialize::PrevEdge* temp = _impl_.prev_edge_;
  _impl_.prev_edge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::PrevEdge* RouteInternalData::unsafe_arena_release_prev_edge() {
  // @@protoc_insertion_point(field_release:tc_serialize.RouteInternalData.prev_edge)
  
  ::tc_serialize::PrevEdge* temp = _impl_.prev_edge_;
  _impl_.prev_edge_ = nullptr;
  return temp;
}
inline ::tc_serialize::PrevEdge* RouteInternalData::_internal_mutable_prev_edge() {
  
  if (_impl_.prev_edge_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::PrevEdge>(GetArenaForAllocation());
    _impl_.prev_edge_ = p;
  }
  return _impl_.prev_edge_;
}
inline ::tc_serialize::PrevEdge* RouteInternalData::mutable_prev_edge() {
  ::tc_serialize::PrevEdge* _msg = _internal_mutable_prev_edge();
  // @@protoc_insertion_point(field_mutable:tc_serialize.RouteInternalData.prev_edge)
  return _msg;
}
inline void RouteInternalData::set_allocated_prev_edge(::tc_serialize::PrevEdge* prev_edge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prev_edge_;
  }
  if (prev_edge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prev_edge);
    if (message_arena != submessage_arena) {
      prev_edge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_edge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.prev_edge_ = prev_edge;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.RouteInternalData.prev_edge)
}

// -------------------------------------------------------------------

// VectorRouteInternalData

// repeated .tc_serialize.RouteInternalData vector_route = 1;
inline int VectorRouteInternalData::_internal_vector_route_size() const {
  return _impl_.vector_route_.size();
}
inline int VectorRouteInternalData::vector_route_size() const {
  return _internal_vector_route_size();
}
inline void VectorRouteInternalData::clear_vector_route() {
  _impl_.vector_route_.Clear();
}
inline ::tc_serialize::RouteInternalData* VectorRouteInternalData::mutable_vector_route(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.VectorRouteInternalData.vector_route)
  return _impl_.vector_route_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteInternalData >*
VectorRouteInternalData::mutable_vector_route() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.VectorRouteInternalData.vector_route)
  return &_impl_.vector_route_;
}
inline const ::tc_serialize::RouteInternalData& VectorRouteInternalData::_internal_vector_route(int index) const {
  return _impl_.vector_route_.Get(index);
}
inline const ::tc_serialize::RouteInternalData& VectorRouteInternalData::vector_route(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.VectorRouteInternalData.vector_route)
  return _internal_vector_route(index);
}
inline ::tc_serialize::RouteInternalData* VectorRouteInternalData::_internal_add_vector_route() {
  return _impl_.vector_route_.Add();
}
inline ::tc_serialize::RouteInternalData* VectorRouteInternalData::add_vector_route() {
  ::tc_serialize::RouteInternalData* _add = _internal_add_vector_route();
  // @@protoc_insertion_point(field_add:tc_serialize.VectorRouteInternalData.vector_route)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteInternalData >&
VectorRouteInternalData::vector_route() const {
  // @@protoc_insertion_point(field_list:tc_serialize.VectorRouteInternalData.vector_route)
  return _impl_.vector_route_;
}

// -------------------------------------------------------------------

// Router

// repeated .tc_serialize.VectorRouteInternalData routes_internal_data = 1;
inline int Router::_internal_routes_internal_data_size() const {
  return _impl_.routes_internal_data_.size();
}
inline int Router::routes_internal_data_size() const {
  return _internal_routes_internal_data_size();
}
inline void Router::clear_routes_internal_data() {
  _impl_.routes_internal_data_.Clear();
}
inline ::tc_serialize::VectorRouteInternalData* Router::mutable_routes_internal_data(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.Router.routes_internal_data)
  return _impl_.routes_internal_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VectorRouteInternalData >*
Router::mutable_routes_internal_data() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.Router.routes_internal_data)
  return &_impl_.routes_internal_data_;
}
inline const ::tc_serialize::VectorRouteInternalData& Router::_internal_routes_internal_data(int index) const {
  return _impl_.routes_internal_data_.Get(index);
}
inline const ::tc_serialize::VectorRouteInternalData& Router::routes_internal_data(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.Router.routes_internal_data)
  return _internal_routes_internal_data(index);
}
inline ::tc_serialize::VectorRouteInternalData* Router::_internal_add_routes_internal_data() {
  return _impl_.routes_internal_data_.Add();
}
inline ::tc_serialize::VectorRouteInternalData* Router::add_routes_internal_data() {
  ::tc_serialize::VectorRouteInternalData* _add = _internal_add_routes_internal_data();
  // @@protoc_insertion_point(field_add:tc_serialize.Router.routes_internal_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VectorRouteInternalData >&
Router::routes_internal_data() const {
  // @@protoc_insertion_point(field_list:tc_serialize.Router.routes_internal_data)
  return _impl_.routes_internal_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tc_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
